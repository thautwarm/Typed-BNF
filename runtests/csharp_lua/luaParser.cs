//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./runtests/csharp_lua/lua.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace lua {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class luaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, LINE_COMMENT=56, SPACE=57, NAME=58, NUMERAL=59, 
		STR_LIT=60, NESTED_STR=61;
	public const int
		RULE_start = 0, RULE_start__y_ = 1, RULE_nempty_list_o_stat_p_ = 2, RULE_allow_empty_o_nempty_list_o_stat_p__p_ = 3, 
		RULE_list_o_stat_p_ = 4, RULE_opt_o_retstat_p_ = 5, RULE_block = 6, RULE_opt_o__i__h__i__p_ = 7, 
		RULE_retstat = 8, RULE_nempty_list_o_elseif_p_ = 9, RULE_allow_empty_o_nempty_list_o_elseif_p__p_ = 10, 
		RULE_list_o_elseif_p_ = 11, RULE_opt_o_else_p_ = 12, RULE_stat = 13, RULE_opt_assign_rhs = 14, 
		RULE_range = 15, RULE_range_tail = 16, RULE_elseif = 17, RULE_else__x_ = 18, 
		RULE_exp = 19, RULE_binexp = 20, RULE_binseq = 21, RULE_binoperand = 22, 
		RULE_unaryexp = 23, RULE_exponent = 24, RULE_prefixexp = 25, RULE_atom = 26, 
		RULE_nempty_seplist_o__i__s__i__s_exp_p_ = 27, RULE_allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_ = 28, 
		RULE_seplist_o__i__s__i__s_exp_p_ = 29, RULE_args = 30, RULE_opt_o_funcname_p_ = 31, 
		RULE_opt_o_parlist_p_ = 32, RULE_functiondef = 33, RULE_varargs = 34, 
		RULE_nempty_seplist_o__i__s__i__s__i_name_k__p_ = 35, RULE_parlist = 36, 
		RULE_nempty_seplist_o_fieldsep_s_field_p_ = 37, RULE_opt_o_fieldsep_p_ = 38, 
		RULE_tableconstructor = 39, RULE_funcname = 40, RULE_field = 41, RULE_fieldsep = 42, 
		RULE_binop = 43;
	public static readonly string[] ruleNames = {
		"start", "start__y_", "nempty_list_o_stat_p_", "allow_empty_o_nempty_list_o_stat_p__p_", 
		"list_o_stat_p_", "opt_o_retstat_p_", "block", "opt_o__i__h__i__p_", "retstat", 
		"nempty_list_o_elseif_p_", "allow_empty_o_nempty_list_o_elseif_p__p_", 
		"list_o_elseif_p_", "opt_o_else_p_", "stat", "opt_assign_rhs", "range", 
		"range_tail", "elseif", "else__x_", "exp", "binexp", "binseq", "binoperand", 
		"unaryexp", "exponent", "prefixexp", "atom", "nempty_seplist_o__i__s__i__s_exp_p_", 
		"allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_", "seplist_o__i__s__i__s_exp_p_", 
		"args", "opt_o_funcname_p_", "opt_o_parlist_p_", "functiondef", "varargs", 
		"nempty_seplist_o__i__s__i__s__i_name_k__p_", "parlist", "nempty_seplist_o_fieldsep_s_field_p_", 
		"opt_o_fieldsep_p_", "tableconstructor", "funcname", "field", "fieldsep", 
		"binop"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'return'", "'='", "'::'", "'break'", "'goto'", "'do'", "'end'", 
		"'while'", "'repeat'", "'until'", "'if'", "'then'", "'for'", "'in'", "'local'", 
		"'function'", "'('", "')'", "','", "'elseif'", "'else'", "'#'", "'-'", 
		"'~'", "'not'", "'^'", "':'", "'['", "']'", "'.'", "'nil'", "'false'", 
		"'true'", "'...'", "'{'", "'}'", "'or'", "'and'", "'<'", "'>'", "'<='", 
		"'>='", "'~='", "'=='", "'|'", "'&'", "'<<'", "'>>'", "'..'", "'+'", "'*'", 
		"'/'", "'//'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "LINE_COMMENT", "SPACE", 
		"NAME", "NUMERAL", "STR_LIT", "NESTED_STR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "lua.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static luaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	public static parameters paramsv (MyList<IToken> names,maybe<IToken> vararg)
	{
	    return (parameters) new parameters(names,vararg);
	}
	public static if_else if_else (IToken pos,block else_body)
	{
	    return (if_else) new if_else(pos,else_body);
	}
	public static if_elseif if_elseif (IToken pos,expr cond,block elif_body)
	{
	    return (if_elseif) new if_elseif(pos,cond,elif_body);
	}
	public static range range (expr low,expr high,maybe<expr> step)
	{
	    return (range) new range(low,high,step);
	}
	public static block block (MyList<stmt> suite,maybe<stmt> ret)
	{
	    return (block) new block(suite,ret);
	}
	public static expr Var (IToken value)
	{
	    return (expr) new Var(value);
	}
	public static expr UnsolvedBin (MyList<Op<expr>> value)
	{
	    return (expr) new UnsolvedBin(value);
	}
	public static expr TableExpr (table value0)
	{
	    return (expr) new TableExpr(value0);
	}
	public static expr String (IToken value0)
	{
	    return (expr) new String(value0);
	}
	public static expr Num (IToken value0)
	{
	    return (expr) new Num(value0);
	}
	public static expr Not (IToken value0,expr value1)
	{
	    return (expr) new Not(value0,value1);
	}
	public static expr Nil (IToken value)
	{
	    return (expr) new Nil(value);
	}
	public static expr NestedExp (IToken value0,expr value1)
	{
	    return (expr) new NestedExp(value0,value1);
	}
	public static expr Neg (IToken value0,expr value1)
	{
	    return (expr) new Neg(value0,value1);
	}
	public static expr Len (IToken value0,expr value1)
	{
	    return (expr) new Len(value0,value1);
	}
	public static expr Inv (IToken value0,expr value1)
	{
	    return (expr) new Inv(value0,value1);
	}
	public static expr Index (expr value0,expr value1)
	{
	    return (expr) new Index(value0,value1);
	}
	public static expr FuncDef (IToken pos,bool is_local,maybe<funcname> fname,maybe<parameters> parameters,block body)
	{
	    return (expr) new FuncDef(pos,is_local,fname,parameters,body);
	}
	public static expr Exponent (expr value0,expr value1)
	{
	    return (expr) new Exponent(value0,value1);
	}
	public static expr Ellipse (IToken value0)
	{
	    return (expr) new Ellipse(value0);
	}
	public static expr CallMethod (expr value0,IToken value1,arguments value2)
	{
	    return (expr) new CallMethod(value0,value1,value2);
	}
	public static expr CallFunc (expr value0,arguments value1)
	{
	    return (expr) new CallFunc(value0,value1);
	}
	public static expr Bool (IToken value0,bool value1)
	{
	    return (expr) new Bool(value0,value1);
	}
	public static expr Bin (IToken op,expr l,expr r)
	{
	    return (expr) new Bin(op,l,r);
	}
	public static expr Attr (expr value0,IToken value1)
	{
	    return (expr) new Attr(value0,value1);
	}
	public static stmt WhileStmt (IToken value0,expr value1,block value2)
	{
	    return (stmt) new WhileStmt(value0,value1,value2);
	}
	public static stmt ReturnStmt (IToken value0,MyList<expr> value1)
	{
	    return (stmt) new ReturnStmt(value0,value1);
	}
	public static stmt RepeatStmt (IToken value0,block value1,expr value2)
	{
	    return (stmt) new RepeatStmt(value0,value1,value2);
	}
	public static stmt LabelStmt (IToken value)
	{
	    return (stmt) new LabelStmt(value);
	}
	public static stmt IfStmt (IToken value0,expr value1,block value2,MyList<if_elseif> value3,maybe<if_else> value4)
	{
	    return (stmt) new IfStmt(value0,value1,value2,value3,value4);
	}
	public static stmt GotoStmt (IToken value0,IToken value1)
	{
	    return (stmt) new GotoStmt(value0,value1);
	}
	public static stmt ForRangeStmt (IToken value0,IToken value1,range value2,block value3)
	{
	    return (stmt) new ForRangeStmt(value0,value1,value2,value3);
	}
	public static stmt ForInStmt (IToken value0,MyList<IToken> value1,MyList<expr> value2,block value3)
	{
	    return (stmt) new ForInStmt(value0,value1,value2,value3);
	}
	public static stmt ExprStmt (expr value)
	{
	    return (stmt) new ExprStmt(value);
	}
	public static stmt EmptyStmt (IToken value0)
	{
	    return (stmt) new EmptyStmt(value0);
	}
	public static stmt DoStmt (IToken value0,block value1)
	{
	    return (stmt) new DoStmt(value0,value1);
	}
	public static stmt BreakStmt (IToken value)
	{
	    return (stmt) new BreakStmt(value);
	}
	public static stmt Assignment (bool value0,MyList<expr> value1,maybe<MyList<expr>> value2)
	{
	    return (stmt) new Assignment(value0,value1,value2);
	}
	public static table_field NameField (IToken key,expr value)
	{
	    return (table_field) new NameField(key,value);
	}
	public static table_field IndexField (IToken pos,expr value,expr item)
	{
	    return (table_field) new IndexField(pos,value,item);
	}
	public static table_field ElementField (expr value0)
	{
	    return (table_field) new ElementField(value0);
	}
	public static table TableConstructor (IToken value0,MyList<table_field> value1)
	{
	    return (table) new TableConstructor(value0,value1);
	}
	public static arguments TableArgs (table value)
	{
	    return (arguments) new TableArgs(value);
	}
	public static arguments StringArg (IToken value)
	{
	    return (arguments) new StringArg(value);
	}
	public static arguments PositionalArgs (IToken value0,MyList<expr> value1)
	{
	    return (arguments) new PositionalArgs(value0,value1);
	}
	public static funcname VarName (IToken value)
	{
	    return (funcname) new VarName(value);
	}
	public static funcname MethodName (funcname value0,IToken value1)
	{
	    return (funcname) new MethodName(value0,value1);
	}
	public static funcname DotName (funcname value0,IToken value1)
	{
	    return (funcname) new DotName(value0,value1);
	}

		public luaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public luaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public block result;
		public Start__y_Context v;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(luaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Start__y_Context start__y_() {
			return GetRuleContext<Start__y_Context>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_localctx.v = start__y_();
			State = 89;
			Match(Eof);
			 _localctx.result =  _localctx.v.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start__y_Context : ParserRuleContext {
		public block result;
		public BlockContext start__y__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Start__y_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start__y_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterStart__y_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitStart__y_(this);
		}
	}

	[RuleVersion(0)]
	public Start__y_Context start__y_() {
		Start__y_Context _localctx = new Start__y_Context(Context, State);
		EnterRule(_localctx, 2, RULE_start__y_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_localctx.start__y__0__1 = block();
			 _localctx.result =  _localctx.start__y__0__1.result;
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nempty_list_o_stat_p_Context : ParserRuleContext {
		public MyList<stmt> result;
		public Nempty_list_o_stat_p_Context nempty_list_o_stat_p__1__1;
		public StatContext nempty_list_o_stat_p__0__1;
		public StatContext nempty_list_o_stat_p__1__2;
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_list_o_stat_p_Context nempty_list_o_stat_p_() {
			return GetRuleContext<Nempty_list_o_stat_p_Context>(0);
		}
		public Nempty_list_o_stat_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nempty_list_o_stat_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterNempty_list_o_stat_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitNempty_list_o_stat_p_(this);
		}
	}

	[RuleVersion(0)]
	public Nempty_list_o_stat_p_Context nempty_list_o_stat_p_() {
		return nempty_list_o_stat_p_(0);
	}

	private Nempty_list_o_stat_p_Context nempty_list_o_stat_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nempty_list_o_stat_p_Context _localctx = new Nempty_list_o_stat_p_Context(Context, _parentState);
		Nempty_list_o_stat_p_Context _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_nempty_list_o_stat_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 96;
			_localctx.nempty_list_o_stat_p__0__1 = stat();
			 _localctx.result =  new MyList<stmt> { _localctx.nempty_list_o_stat_p__0__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nempty_list_o_stat_p_Context(_parentctx, _parentState);
					_localctx.nempty_list_o_stat_p__1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nempty_list_o_stat_p_);
					State = 99;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 100;
					_localctx.nempty_list_o_stat_p__1__2 = stat();
					 _localctx.result =  (MyList<stmt>) appendList<stmt>((MyList<stmt>) _localctx.nempty_list_o_stat_p__1__1.result, (stmt) _localctx.nempty_list_o_stat_p__1__2.result);
					                      
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Allow_empty_o_nempty_list_o_stat_p__p_Context : ParserRuleContext {
		public MyList<stmt> result;
		public Nempty_list_o_stat_p_Context allow_empty_o_nempty_list_o_stat_p__p__1__1;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_list_o_stat_p_Context nempty_list_o_stat_p_() {
			return GetRuleContext<Nempty_list_o_stat_p_Context>(0);
		}
		public Allow_empty_o_nempty_list_o_stat_p__p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allow_empty_o_nempty_list_o_stat_p__p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterAllow_empty_o_nempty_list_o_stat_p__p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitAllow_empty_o_nempty_list_o_stat_p__p_(this);
		}
	}

	[RuleVersion(0)]
	public Allow_empty_o_nempty_list_o_stat_p__p_Context allow_empty_o_nempty_list_o_stat_p__p_() {
		Allow_empty_o_nempty_list_o_stat_p__p_Context _localctx = new Allow_empty_o_nempty_list_o_stat_p__p_Context(Context, State);
		EnterRule(_localctx, 6, RULE_allow_empty_o_nempty_list_o_stat_p__p_);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				 _localctx.result =  new MyList<stmt> {  };
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				_localctx.allow_empty_o_nempty_list_o_stat_p__p__1__1 = nempty_list_o_stat_p_(0);
				 _localctx.result =  _localctx.allow_empty_o_nempty_list_o_stat_p__p__1__1.result;
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_o_stat_p_Context : ParserRuleContext {
		public MyList<stmt> result;
		public Allow_empty_o_nempty_list_o_stat_p__p_Context list_o_stat_p__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public Allow_empty_o_nempty_list_o_stat_p__p_Context allow_empty_o_nempty_list_o_stat_p__p_() {
			return GetRuleContext<Allow_empty_o_nempty_list_o_stat_p__p_Context>(0);
		}
		public List_o_stat_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_o_stat_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterList_o_stat_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitList_o_stat_p_(this);
		}
	}

	[RuleVersion(0)]
	public List_o_stat_p_Context list_o_stat_p_() {
		List_o_stat_p_Context _localctx = new List_o_stat_p_Context(Context, State);
		EnterRule(_localctx, 8, RULE_list_o_stat_p_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_localctx.list_o_stat_p__0__1 = allow_empty_o_nempty_list_o_stat_p__p_();
			 _localctx.result =  _localctx.list_o_stat_p__0__1.result;
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_o_retstat_p_Context : ParserRuleContext {
		public maybe<stmt> result;
		public RetstatContext opt_o_retstat_p__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public Opt_o_retstat_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_o_retstat_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterOpt_o_retstat_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitOpt_o_retstat_p_(this);
		}
	}

	[RuleVersion(0)]
	public Opt_o_retstat_p_Context opt_o_retstat_p_() {
		Opt_o_retstat_p_Context _localctx = new Opt_o_retstat_p_Context(Context, State);
		EnterRule(_localctx, 10, RULE_opt_o_retstat_p_);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				_localctx.opt_o_retstat_p__0__1 = retstat();
				 _localctx.result =  (maybe<stmt>) some<stmt>((stmt) _localctx.opt_o_retstat_p__0__1.result);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<stmt>) none<stmt>();
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public block result;
		public List_o_stat_p_Context block_0__1;
		public Opt_o_retstat_p_Context block_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public List_o_stat_p_Context list_o_stat_p_() {
			return GetRuleContext<List_o_stat_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o_retstat_p_Context opt_o_retstat_p_() {
			return GetRuleContext<Opt_o_retstat_p_Context>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_localctx.block_0__1 = list_o_stat_p_();
			State = 124;
			_localctx.block_0__2 = opt_o_retstat_p_();
			 _localctx.result =  (block) block((MyList<stmt>) _localctx.block_0__1.result, (maybe<stmt>) _localctx.block_0__2.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_o__i__h__i__p_Context : ParserRuleContext {
		public maybe<IToken> result;
		public IToken opt_o__i__h__i__p__0__1;
		public Opt_o__i__h__i__p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_o__i__h__i__p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterOpt_o__i__h__i__p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitOpt_o__i__h__i__p_(this);
		}
	}

	[RuleVersion(0)]
	public Opt_o__i__h__i__p_Context opt_o__i__h__i__p_() {
		Opt_o__i__h__i__p_Context _localctx = new Opt_o__i__h__i__p_Context(Context, State);
		EnterRule(_localctx, 14, RULE_opt_o__i__h__i__p_);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				_localctx.opt_o__i__h__i__p__0__1 = Match(T__0);
				 _localctx.result =  (maybe<IToken>) some<IToken>((IToken) _localctx.opt_o__i__h__i__p__0__1);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<IToken>) none<IToken>();
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		public stmt result;
		public IToken retstat_0__1;
		public Seplist_o__i__s__i__s_exp_p_Context retstat_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o__i__h__i__p_Context opt_o__i__h__i__p_() {
			return GetRuleContext<Opt_o__i__h__i__p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_exp_p_Context seplist_o__i__s__i__s_exp_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_exp_p_Context>(0);
		}
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(Context, State);
		EnterRule(_localctx, 16, RULE_retstat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_localctx.retstat_0__1 = Match(T__1);
			State = 133;
			_localctx.retstat_0__2 = seplist_o__i__s__i__s_exp_p_();
			State = 134;
			opt_o__i__h__i__p_();
			 _localctx.result =  (stmt) ReturnStmt((IToken) _localctx.retstat_0__1, (MyList<expr>) _localctx.retstat_0__2.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nempty_list_o_elseif_p_Context : ParserRuleContext {
		public MyList<if_elseif> result;
		public Nempty_list_o_elseif_p_Context nempty_list_o_elseif_p__1__1;
		public ElseifContext nempty_list_o_elseif_p__0__1;
		public ElseifContext nempty_list_o_elseif_p__1__2;
		[System.Diagnostics.DebuggerNonUserCode] public ElseifContext elseif() {
			return GetRuleContext<ElseifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_list_o_elseif_p_Context nempty_list_o_elseif_p_() {
			return GetRuleContext<Nempty_list_o_elseif_p_Context>(0);
		}
		public Nempty_list_o_elseif_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nempty_list_o_elseif_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterNempty_list_o_elseif_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitNempty_list_o_elseif_p_(this);
		}
	}

	[RuleVersion(0)]
	public Nempty_list_o_elseif_p_Context nempty_list_o_elseif_p_() {
		return nempty_list_o_elseif_p_(0);
	}

	private Nempty_list_o_elseif_p_Context nempty_list_o_elseif_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nempty_list_o_elseif_p_Context _localctx = new Nempty_list_o_elseif_p_Context(Context, _parentState);
		Nempty_list_o_elseif_p_Context _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_nempty_list_o_elseif_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 138;
			_localctx.nempty_list_o_elseif_p__0__1 = elseif();
			 _localctx.result =  new MyList<if_elseif> { _localctx.nempty_list_o_elseif_p__0__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nempty_list_o_elseif_p_Context(_parentctx, _parentState);
					_localctx.nempty_list_o_elseif_p__1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nempty_list_o_elseif_p_);
					State = 141;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 142;
					_localctx.nempty_list_o_elseif_p__1__2 = elseif();
					 _localctx.result =  (MyList<if_elseif>) appendList<if_elseif>((MyList<if_elseif>) _localctx.nempty_list_o_elseif_p__1__1.result, (if_elseif) _localctx.nempty_list_o_elseif_p__1__2.result);
					                      
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Allow_empty_o_nempty_list_o_elseif_p__p_Context : ParserRuleContext {
		public MyList<if_elseif> result;
		public Nempty_list_o_elseif_p_Context allow_empty_o_nempty_list_o_elseif_p__p__1__1;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_list_o_elseif_p_Context nempty_list_o_elseif_p_() {
			return GetRuleContext<Nempty_list_o_elseif_p_Context>(0);
		}
		public Allow_empty_o_nempty_list_o_elseif_p__p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allow_empty_o_nempty_list_o_elseif_p__p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterAllow_empty_o_nempty_list_o_elseif_p__p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitAllow_empty_o_nempty_list_o_elseif_p__p_(this);
		}
	}

	[RuleVersion(0)]
	public Allow_empty_o_nempty_list_o_elseif_p__p_Context allow_empty_o_nempty_list_o_elseif_p__p_() {
		Allow_empty_o_nempty_list_o_elseif_p__p_Context _localctx = new Allow_empty_o_nempty_list_o_elseif_p__p_Context(Context, State);
		EnterRule(_localctx, 20, RULE_allow_empty_o_nempty_list_o_elseif_p__p_);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				 _localctx.result =  new MyList<if_elseif> {  };
				            
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151;
				_localctx.allow_empty_o_nempty_list_o_elseif_p__p__1__1 = nempty_list_o_elseif_p_(0);
				 _localctx.result =  _localctx.allow_empty_o_nempty_list_o_elseif_p__p__1__1.result;
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_o_elseif_p_Context : ParserRuleContext {
		public MyList<if_elseif> result;
		public Allow_empty_o_nempty_list_o_elseif_p__p_Context list_o_elseif_p__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public Allow_empty_o_nempty_list_o_elseif_p__p_Context allow_empty_o_nempty_list_o_elseif_p__p_() {
			return GetRuleContext<Allow_empty_o_nempty_list_o_elseif_p__p_Context>(0);
		}
		public List_o_elseif_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_o_elseif_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterList_o_elseif_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitList_o_elseif_p_(this);
		}
	}

	[RuleVersion(0)]
	public List_o_elseif_p_Context list_o_elseif_p_() {
		List_o_elseif_p_Context _localctx = new List_o_elseif_p_Context(Context, State);
		EnterRule(_localctx, 22, RULE_list_o_elseif_p_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_localctx.list_o_elseif_p__0__1 = allow_empty_o_nempty_list_o_elseif_p__p_();
			 _localctx.result =  _localctx.list_o_elseif_p__0__1.result;
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_o_else_p_Context : ParserRuleContext {
		public maybe<if_else> result;
		public Else__x_Context opt_o_else_p__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public Else__x_Context else__x_() {
			return GetRuleContext<Else__x_Context>(0);
		}
		public Opt_o_else_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_o_else_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterOpt_o_else_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitOpt_o_else_p_(this);
		}
	}

	[RuleVersion(0)]
	public Opt_o_else_p_Context opt_o_else_p_() {
		Opt_o_else_p_Context _localctx = new Opt_o_else_p_Context(Context, State);
		EnterRule(_localctx, 24, RULE_opt_o_else_p_);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				_localctx.opt_o_else_p__0__1 = else__x_();
				 _localctx.result =  (maybe<if_else>) some<if_else>((if_else) _localctx.opt_o_else_p__0__1.result);
				            
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<if_else>) none<if_else>();
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public stmt result;
		public IToken stat_0__1;
		public Nempty_seplist_o__i__s__i__s_exp_p_Context stat_1__1;
		public Nempty_seplist_o__i__s__i__s_exp_p_Context stat_1__3;
		public ExpContext stat_2__1;
		public IToken stat_3__2;
		public IToken stat_4__1;
		public IToken stat_5__1;
		public IToken stat_5__2;
		public IToken stat_6__1;
		public BlockContext stat_6__2;
		public IToken stat_7__1;
		public ExpContext stat_7__2;
		public BlockContext stat_7__4;
		public IToken stat_8__1;
		public BlockContext stat_8__2;
		public ExpContext stat_8__4;
		public IToken stat_9__1;
		public ExpContext stat_9__2;
		public BlockContext stat_9__4;
		public List_o_elseif_p_Context stat_9__5;
		public Opt_o_else_p_Context stat_9__6;
		public IToken stat_10__1;
		public IToken stat_10__2;
		public RangeContext stat_10__4;
		public BlockContext stat_10__6;
		public IToken stat_11__1;
		public Nempty_seplist_o__i__s__i__s__i_name_k__p_Context stat_11__2;
		public Nempty_seplist_o__i__s__i__s_exp_p_Context stat_11__4;
		public BlockContext stat_11__6;
		public IToken stat_12__1;
		public FuncnameContext stat_12__3;
		public Opt_o_parlist_p_Context stat_12__5;
		public BlockContext stat_12__7;
		public Nempty_seplist_o__i__s__i__s__i_name_k__p_Context stat_13__2;
		public Opt_assign_rhsContext stat_13__3;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o__i__s__i__s_exp_p_Context[] nempty_seplist_o__i__s__i__s_exp_p_() {
			return GetRuleContexts<Nempty_seplist_o__i__s__i__s_exp_p_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o__i__s__i__s_exp_p_Context nempty_seplist_o__i__s__i__s_exp_p_(int i) {
			return GetRuleContext<Nempty_seplist_o__i__s__i__s_exp_p_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(luaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public List_o_elseif_p_Context list_o_elseif_p_() {
			return GetRuleContext<List_o_elseif_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o_else_p_Context opt_o_else_p_() {
			return GetRuleContext<Opt_o_else_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o__i__s__i__s__i_name_k__p_Context nempty_seplist_o__i__s__i__s__i_name_k__p_() {
			return GetRuleContext<Nempty_seplist_o__i__s__i__s__i_name_k__p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o_parlist_p_Context opt_o_parlist_p_() {
			return GetRuleContext<Opt_o_parlist_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_assign_rhsContext opt_assign_rhs() {
			return GetRuleContext<Opt_assign_rhsContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 26, RULE_stat);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				_localctx.stat_0__1 = Match(T__0);
				 _localctx.result =  (stmt) EmptyStmt((IToken) _localctx.stat_0__1);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				_localctx.stat_1__1 = nempty_seplist_o__i__s__i__s_exp_p_(0);
				State = 168;
				Match(T__2);
				State = 169;
				_localctx.stat_1__3 = nempty_seplist_o__i__s__i__s_exp_p_(0);
				 _localctx.result =  (stmt) Assignment((bool) false, (MyList<expr>) _localctx.stat_1__1.result, (maybe<MyList<expr>>) (maybe<MyList<expr>>) some<MyList<expr>>((MyList<expr>) _localctx.stat_1__3.result));
				            
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172;
				_localctx.stat_2__1 = exp();
				 _localctx.result =  (stmt) ExprStmt((expr) _localctx.stat_2__1.result);
				            
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175;
				Match(T__3);
				State = 176;
				_localctx.stat_3__2 = Match(NAME);
				State = 177;
				Match(T__3);
				 _localctx.result =  (stmt) LabelStmt((IToken) _localctx.stat_3__2);
				            
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 179;
				_localctx.stat_4__1 = Match(T__4);
				 _localctx.result =  (stmt) BreakStmt((IToken) _localctx.stat_4__1);
				            
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 181;
				_localctx.stat_5__1 = Match(T__5);
				State = 182;
				_localctx.stat_5__2 = Match(NAME);
				 _localctx.result =  (stmt) GotoStmt((IToken) _localctx.stat_5__1, (IToken) _localctx.stat_5__2);
				            
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 184;
				_localctx.stat_6__1 = Match(T__6);
				State = 185;
				_localctx.stat_6__2 = block();
				State = 186;
				Match(T__7);
				 _localctx.result =  (stmt) DoStmt((IToken) _localctx.stat_6__1, (block) _localctx.stat_6__2.result);
				            
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 189;
				_localctx.stat_7__1 = Match(T__8);
				State = 190;
				_localctx.stat_7__2 = exp();
				State = 191;
				Match(T__6);
				State = 192;
				_localctx.stat_7__4 = block();
				State = 193;
				Match(T__7);
				 _localctx.result =  (stmt) WhileStmt((IToken) _localctx.stat_7__1, (expr) _localctx.stat_7__2.result, (block) _localctx.stat_7__4.result);
				            
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 196;
				_localctx.stat_8__1 = Match(T__9);
				State = 197;
				_localctx.stat_8__2 = block();
				State = 198;
				Match(T__10);
				State = 199;
				_localctx.stat_8__4 = exp();
				 _localctx.result =  (stmt) RepeatStmt((IToken) _localctx.stat_8__1, (block) _localctx.stat_8__2.result, (expr) _localctx.stat_8__4.result);
				            
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 202;
				_localctx.stat_9__1 = Match(T__11);
				State = 203;
				_localctx.stat_9__2 = exp();
				State = 204;
				Match(T__12);
				State = 205;
				_localctx.stat_9__4 = block();
				State = 206;
				_localctx.stat_9__5 = list_o_elseif_p_();
				State = 207;
				_localctx.stat_9__6 = opt_o_else_p_();
				State = 208;
				Match(T__7);
				 _localctx.result =  (stmt) IfStmt((IToken) _localctx.stat_9__1, (expr) _localctx.stat_9__2.result, (block) _localctx.stat_9__4.result, (MyList<if_elseif>) _localctx.stat_9__5.result, (maybe<if_else>) _localctx.stat_9__6.result);
				            
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 211;
				_localctx.stat_10__1 = Match(T__13);
				State = 212;
				_localctx.stat_10__2 = Match(NAME);
				State = 213;
				Match(T__2);
				State = 214;
				_localctx.stat_10__4 = range();
				State = 215;
				Match(T__6);
				State = 216;
				_localctx.stat_10__6 = block();
				State = 217;
				Match(T__7);
				 _localctx.result =  (stmt) ForRangeStmt((IToken) _localctx.stat_10__1, (IToken) _localctx.stat_10__2, (range) _localctx.stat_10__4.result, (block) _localctx.stat_10__6.result);
				            
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 220;
				_localctx.stat_11__1 = Match(T__13);
				State = 221;
				_localctx.stat_11__2 = nempty_seplist_o__i__s__i__s__i_name_k__p_(0);
				State = 222;
				Match(T__14);
				State = 223;
				_localctx.stat_11__4 = nempty_seplist_o__i__s__i__s_exp_p_(0);
				State = 224;
				Match(T__6);
				State = 225;
				_localctx.stat_11__6 = block();
				State = 226;
				Match(T__7);
				 _localctx.result =  (stmt) ForInStmt((IToken) _localctx.stat_11__1, (MyList<IToken>) _localctx.stat_11__2.result, (MyList<expr>) _localctx.stat_11__4.result, (block) _localctx.stat_11__6.result);
				            
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 229;
				_localctx.stat_12__1 = Match(T__15);
				State = 230;
				Match(T__16);
				State = 231;
				_localctx.stat_12__3 = funcname(0);
				State = 232;
				Match(T__17);
				State = 233;
				_localctx.stat_12__5 = opt_o_parlist_p_();
				State = 234;
				Match(T__18);
				State = 235;
				_localctx.stat_12__7 = block();
				State = 236;
				Match(T__7);
				 _localctx.result =  (stmt) ExprStmt((expr) (expr) FuncDef((IToken) _localctx.stat_12__1, (bool) true, (maybe<funcname>) (maybe<funcname>) some<funcname>((funcname) _localctx.stat_12__3.result), (maybe<parameters>) _localctx.stat_12__5.result, (block) _localctx.stat_12__7.result));
				            
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 239;
				Match(T__15);
				State = 240;
				_localctx.stat_13__2 = nempty_seplist_o__i__s__i__s__i_name_k__p_(0);
				State = 241;
				_localctx.stat_13__3 = opt_assign_rhs();
				 _localctx.result =  (stmt) Assignment((bool) true, (MyList<expr>) (MyList<expr>) listMap<IToken, expr>((MyList<IToken>) _localctx.stat_13__2.result, (System.Func<IToken, expr>) Var), (maybe<MyList<expr>>) _localctx.stat_13__3.result);
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_assign_rhsContext : ParserRuleContext {
		public maybe<MyList<expr>> result;
		public Nempty_seplist_o__i__s__i__s_exp_p_Context opt_assign_rhs_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o__i__s__i__s_exp_p_Context nempty_seplist_o__i__s__i__s_exp_p_() {
			return GetRuleContext<Nempty_seplist_o__i__s__i__s_exp_p_Context>(0);
		}
		public Opt_assign_rhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_assign_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterOpt_assign_rhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitOpt_assign_rhs(this);
		}
	}

	[RuleVersion(0)]
	public Opt_assign_rhsContext opt_assign_rhs() {
		Opt_assign_rhsContext _localctx = new Opt_assign_rhsContext(Context, State);
		EnterRule(_localctx, 28, RULE_opt_assign_rhs);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				Match(T__2);
				State = 247;
				_localctx.opt_assign_rhs_0__2 = nempty_seplist_o__i__s__i__s_exp_p_(0);
				 _localctx.result =  (maybe<MyList<expr>>) some<MyList<expr>>((MyList<expr>) _localctx.opt_assign_rhs_0__2.result);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<MyList<expr>>) none<MyList<expr>>();
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public range result;
		public ExpContext range_0__1;
		public ExpContext range_0__3;
		public Range_tailContext range_0__4;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_tailContext range_tail() {
			return GetRuleContext<Range_tailContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 30, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			_localctx.range_0__1 = exp();
			State = 254;
			Match(T__19);
			State = 255;
			_localctx.range_0__3 = exp();
			State = 256;
			_localctx.range_0__4 = range_tail();
			 _localctx.result =  (range) range((expr) _localctx.range_0__1.result, (expr) _localctx.range_0__3.result, (maybe<expr>) _localctx.range_0__4.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_tailContext : ParserRuleContext {
		public maybe<expr> result;
		public ExpContext range_tail_0__2;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Range_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterRange_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitRange_tail(this);
		}
	}

	[RuleVersion(0)]
	public Range_tailContext range_tail() {
		Range_tailContext _localctx = new Range_tailContext(Context, State);
		EnterRule(_localctx, 32, RULE_range_tail);
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				Match(T__19);
				State = 260;
				_localctx.range_tail_0__2 = exp();
				 _localctx.result =  (maybe<expr>) some<expr>((expr) _localctx.range_tail_0__2.result);
				            
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<expr>) none<expr>();
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifContext : ParserRuleContext {
		public if_elseif result;
		public IToken elseif_0__1;
		public ExpContext elseif_0__2;
		public BlockContext elseif_0__4;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterElseif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitElseif(this);
		}
	}

	[RuleVersion(0)]
	public ElseifContext elseif() {
		ElseifContext _localctx = new ElseifContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_localctx.elseif_0__1 = Match(T__20);
			State = 267;
			_localctx.elseif_0__2 = exp();
			State = 268;
			Match(T__12);
			State = 269;
			_localctx.elseif_0__4 = block();
			 _localctx.result =  (if_elseif) if_elseif((IToken) _localctx.elseif_0__1, (expr) _localctx.elseif_0__2.result, (block) _localctx.elseif_0__4.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else__x_Context : ParserRuleContext {
		public if_else result;
		public IToken else__x__0__1;
		public BlockContext else__x__0__2;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else__x_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else__x_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterElse__x_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitElse__x_(this);
		}
	}

	[RuleVersion(0)]
	public Else__x_Context else__x_() {
		Else__x_Context _localctx = new Else__x_Context(Context, State);
		EnterRule(_localctx, 36, RULE_else__x_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_localctx.else__x__0__1 = Match(T__21);
			State = 273;
			_localctx.else__x__0__2 = block();
			 _localctx.result =  (if_else) if_else((IToken) _localctx.else__x__0__1, (block) _localctx.else__x__0__2.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public expr result;
		public BinexpContext exp_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public BinexpContext binexp() {
			return GetRuleContext<BinexpContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 38, RULE_exp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_localctx.exp_0__1 = binexp();
			 int _ = 0;
			                _localctx.result =  _localctx.exp_0__1.result;
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinexpContext : ParserRuleContext {
		public expr result;
		public BinseqContext binexp_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public BinseqContext binseq() {
			return GetRuleContext<BinseqContext>(0);
		}
		public BinexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterBinexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitBinexp(this);
		}
	}

	[RuleVersion(0)]
	public BinexpContext binexp() {
		BinexpContext _localctx = new BinexpContext(Context, State);
		EnterRule(_localctx, 40, RULE_binexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_localctx.binexp_0__1 = binseq(0);
			 _localctx.result =  (expr) mkBinOpSeq((MyList<Op<expr>>) _localctx.binexp_0__1.result, (System.Func<IToken, expr, expr, expr>) Bin, (System.Func<MyList<Op<expr>>, expr>) UnsolvedBin);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinseqContext : ParserRuleContext {
		public MyList<Op<expr>> result;
		public BinseqContext binseq_0__1;
		public BinoperandContext binseq_1__1;
		public BinopContext binseq_0__2;
		public BinoperandContext binseq_0__3;
		[System.Diagnostics.DebuggerNonUserCode] public BinoperandContext binoperand() {
			return GetRuleContext<BinoperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinseqContext binseq() {
			return GetRuleContext<BinseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop() {
			return GetRuleContext<BinopContext>(0);
		}
		public BinseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binseq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterBinseq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitBinseq(this);
		}
	}

	[RuleVersion(0)]
	public BinseqContext binseq() {
		return binseq(0);
	}

	private BinseqContext binseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BinseqContext _localctx = new BinseqContext(Context, _parentState);
		BinseqContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_binseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 283;
			_localctx.binseq_1__1 = binoperand();
			 _localctx.result =  new MyList<Op<expr>> { _localctx.binseq_1__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 293;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinseqContext(_parentctx, _parentState);
					_localctx.binseq_0__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_binseq);
					State = 286;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 287;
					_localctx.binseq_0__2 = binop();
					State = 288;
					_localctx.binseq_0__3 = binoperand();
					 _localctx.result =  (MyList<Op<expr>>) appendList<Op<expr>>((MyList<Op<expr>>) (MyList<Op<expr>>) appendList<Op<expr>>((MyList<Op<expr>>) _localctx.binseq_0__1.result, (Op<expr>) _localctx.binseq_0__2.result), (Op<expr>) _localctx.binseq_0__3.result);
					                      
					}
					} 
				}
				State = 295;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinoperandContext : ParserRuleContext {
		public Op<expr> result;
		public UnaryexpContext binoperand_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryexpContext unaryexp() {
			return GetRuleContext<UnaryexpContext>(0);
		}
		public BinoperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binoperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterBinoperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitBinoperand(this);
		}
	}

	[RuleVersion(0)]
	public BinoperandContext binoperand() {
		BinoperandContext _localctx = new BinoperandContext(Context, State);
		EnterRule(_localctx, 44, RULE_binoperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_localctx.binoperand_0__1 = unaryexp();
			 _localctx.result =  (Op<expr>) mkOperand((expr) _localctx.binoperand_0__1.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryexpContext : ParserRuleContext {
		public expr result;
		public IToken unaryexp_0__1;
		public ExponentContext unaryexp_0__2;
		public IToken unaryexp_1__1;
		public ExponentContext unaryexp_1__2;
		public IToken unaryexp_2__1;
		public ExponentContext unaryexp_2__2;
		public IToken unaryexp_3__1;
		public ExponentContext unaryexp_3__2;
		public ExponentContext unaryexp_4__1;
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public UnaryexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterUnaryexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitUnaryexp(this);
		}
	}

	[RuleVersion(0)]
	public UnaryexpContext unaryexp() {
		UnaryexpContext _localctx = new UnaryexpContext(Context, State);
		EnterRule(_localctx, 46, RULE_unaryexp);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				_localctx.unaryexp_0__1 = Match(T__22);
				State = 300;
				_localctx.unaryexp_0__2 = exponent();
				 _localctx.result =  (expr) Len((IToken) _localctx.unaryexp_0__1, (expr) _localctx.unaryexp_0__2.result);
				            
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303;
				_localctx.unaryexp_1__1 = Match(T__23);
				State = 304;
				_localctx.unaryexp_1__2 = exponent();
				 _localctx.result =  (expr) Neg((IToken) _localctx.unaryexp_1__1, (expr) _localctx.unaryexp_1__2.result);
				            
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 307;
				_localctx.unaryexp_2__1 = Match(T__24);
				State = 308;
				_localctx.unaryexp_2__2 = exponent();
				 _localctx.result =  (expr) Inv((IToken) _localctx.unaryexp_2__1, (expr) _localctx.unaryexp_2__2.result);
				            
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 311;
				_localctx.unaryexp_3__1 = Match(T__25);
				State = 312;
				_localctx.unaryexp_3__2 = exponent();
				 _localctx.result =  (expr) Not((IToken) _localctx.unaryexp_3__1, (expr) _localctx.unaryexp_3__2.result);
				            
				}
				break;
			case T__16:
			case T__17:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case NAME:
			case NUMERAL:
			case STR_LIT:
			case NESTED_STR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 315;
				_localctx.unaryexp_4__1 = exponent();
				 _localctx.result =  _localctx.unaryexp_4__1.result;
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		public expr result;
		public PrefixexpContext exponent_0__1;
		public ExponentContext exponent_0__3;
		public PrefixexpContext exponent_1__1;
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 48, RULE_exponent);
		try {
			State = 328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				_localctx.exponent_0__1 = prefixexp(0);
				State = 321;
				Match(T__26);
				State = 322;
				_localctx.exponent_0__3 = exponent();
				 _localctx.result =  (expr) Exponent((expr) _localctx.exponent_0__1.result, (expr) _localctx.exponent_0__3.result);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325;
				_localctx.exponent_1__1 = prefixexp(0);
				 _localctx.result =  _localctx.exponent_1__1.result;
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		public expr result;
		public PrefixexpContext prefixexp_2__1;
		public PrefixexpContext prefixexp_3__1;
		public PrefixexpContext prefixexp_4__1;
		public PrefixexpContext prefixexp_5__1;
		public IToken prefixexp_0__1;
		public IToken prefixexp_1__1;
		public ExpContext prefixexp_1__2;
		public AtomContext prefixexp_6__1;
		public ArgsContext prefixexp_2__2;
		public IToken prefixexp_3__3;
		public ArgsContext prefixexp_3__4;
		public ExpContext prefixexp_4__3;
		public IToken prefixexp_5__3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(luaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		return prefixexp(0);
	}

	private PrefixexpContext prefixexp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrefixexpContext _localctx = new PrefixexpContext(Context, _parentState);
		PrefixexpContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_prefixexp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 331;
				_localctx.prefixexp_0__1 = Match(NAME);
				 _localctx.result =  (expr) Var((IToken) _localctx.prefixexp_0__1);
				            
				}
				break;
			case T__17:
				{
				State = 333;
				_localctx.prefixexp_1__1 = Match(T__17);
				State = 334;
				_localctx.prefixexp_1__2 = exp();
				State = 335;
				Match(T__18);
				 _localctx.result =  (expr) NestedExp((IToken) _localctx.prefixexp_1__1, (expr) _localctx.prefixexp_1__2.result);
				            
				}
				break;
			case T__16:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case NUMERAL:
			case STR_LIT:
			case NESTED_STR:
				{
				State = 338;
				_localctx.prefixexp_6__1 = atom();
				 _localctx.result =  _localctx.prefixexp_6__1.result;
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 363;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new PrefixexpContext(_parentctx, _parentState);
						_localctx.prefixexp_2__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_prefixexp);
						State = 343;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 344;
						_localctx.prefixexp_2__2 = args();
						 _localctx.result =  (expr) CallFunc((expr) _localctx.prefixexp_2__1.result, (arguments) _localctx.prefixexp_2__2.result);
						                      
						}
						break;
					case 2:
						{
						_localctx = new PrefixexpContext(_parentctx, _parentState);
						_localctx.prefixexp_3__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_prefixexp);
						State = 347;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 348;
						Match(T__27);
						State = 349;
						_localctx.prefixexp_3__3 = Match(NAME);
						State = 350;
						_localctx.prefixexp_3__4 = args();
						 _localctx.result =  (expr) CallMethod((expr) _localctx.prefixexp_3__1.result, (IToken) _localctx.prefixexp_3__3, (arguments) _localctx.prefixexp_3__4.result);
						                      
						}
						break;
					case 3:
						{
						_localctx = new PrefixexpContext(_parentctx, _parentState);
						_localctx.prefixexp_4__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_prefixexp);
						State = 353;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 354;
						Match(T__28);
						State = 355;
						_localctx.prefixexp_4__3 = exp();
						State = 356;
						Match(T__29);
						 _localctx.result =  (expr) Index((expr) _localctx.prefixexp_4__1.result, (expr) _localctx.prefixexp_4__3.result);
						                      
						}
						break;
					case 4:
						{
						_localctx = new PrefixexpContext(_parentctx, _parentState);
						_localctx.prefixexp_5__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_prefixexp);
						State = 359;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 360;
						Match(T__30);
						State = 361;
						_localctx.prefixexp_5__3 = Match(NAME);
						 _localctx.result =  (expr) Attr((expr) _localctx.prefixexp_5__1.result, (IToken) _localctx.prefixexp_5__3);
						                      
						}
						break;
					}
					} 
				}
				State = 367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public expr result;
		public IToken atom_0__1;
		public IToken atom_1__1;
		public IToken atom_2__1;
		public IToken atom_3__1;
		public IToken atom_4__1;
		public IToken atom_5__1;
		public IToken atom_6__1;
		public FunctiondefContext atom_7__1;
		public TableconstructorContext atom_8__1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERAL() { return GetToken(luaParser.NUMERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LIT() { return GetToken(luaParser.STR_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_STR() { return GetToken(luaParser.NESTED_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 52, RULE_atom);
		try {
			State = 388;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368;
				_localctx.atom_0__1 = Match(T__31);
				 _localctx.result =  (expr) Nil((IToken) _localctx.atom_0__1);
				            
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 370;
				_localctx.atom_1__1 = Match(T__32);
				 _localctx.result =  (expr) Bool((IToken) _localctx.atom_1__1, (bool) false);
				            
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 3);
				{
				State = 372;
				_localctx.atom_2__1 = Match(T__33);
				 _localctx.result =  (expr) Bool((IToken) _localctx.atom_2__1, (bool) true);
				            
				}
				break;
			case NUMERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 374;
				_localctx.atom_3__1 = Match(NUMERAL);
				 _localctx.result =  (expr) Num((IToken) _localctx.atom_3__1);
				            
				}
				break;
			case STR_LIT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 376;
				_localctx.atom_4__1 = Match(STR_LIT);
				 _localctx.result =  (expr) String((IToken) _localctx.atom_4__1);
				            
				}
				break;
			case NESTED_STR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 378;
				_localctx.atom_5__1 = Match(NESTED_STR);
				 _localctx.result =  (expr) String((IToken) _localctx.atom_5__1);
				            
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 7);
				{
				State = 380;
				_localctx.atom_6__1 = Match(T__34);
				 _localctx.result =  (expr) Ellipse((IToken) _localctx.atom_6__1);
				            
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 8);
				{
				State = 382;
				_localctx.atom_7__1 = functiondef();
				 _localctx.result =  _localctx.atom_7__1.result;
				            
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 9);
				{
				State = 385;
				_localctx.atom_8__1 = tableconstructor();
				 _localctx.result =  (expr) TableExpr((table) _localctx.atom_8__1.result);
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nempty_seplist_o__i__s__i__s_exp_p_Context : ParserRuleContext {
		public MyList<expr> result;
		public Nempty_seplist_o__i__s__i__s_exp_p_Context nempty_seplist_o__i__s__i__s_exp_p__1__1;
		public ExpContext nempty_seplist_o__i__s__i__s_exp_p__0__1;
		public ExpContext nempty_seplist_o__i__s__i__s_exp_p__1__3;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o__i__s__i__s_exp_p_Context nempty_seplist_o__i__s__i__s_exp_p_() {
			return GetRuleContext<Nempty_seplist_o__i__s__i__s_exp_p_Context>(0);
		}
		public Nempty_seplist_o__i__s__i__s_exp_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nempty_seplist_o__i__s__i__s_exp_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterNempty_seplist_o__i__s__i__s_exp_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitNempty_seplist_o__i__s__i__s_exp_p_(this);
		}
	}

	[RuleVersion(0)]
	public Nempty_seplist_o__i__s__i__s_exp_p_Context nempty_seplist_o__i__s__i__s_exp_p_() {
		return nempty_seplist_o__i__s__i__s_exp_p_(0);
	}

	private Nempty_seplist_o__i__s__i__s_exp_p_Context nempty_seplist_o__i__s__i__s_exp_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nempty_seplist_o__i__s__i__s_exp_p_Context _localctx = new Nempty_seplist_o__i__s__i__s_exp_p_Context(Context, _parentState);
		Nempty_seplist_o__i__s__i__s_exp_p_Context _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_nempty_seplist_o__i__s__i__s_exp_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 391;
			_localctx.nempty_seplist_o__i__s__i__s_exp_p__0__1 = exp();
			 _localctx.result =  new MyList<expr> { _localctx.nempty_seplist_o__i__s__i__s_exp_p__0__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 401;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nempty_seplist_o__i__s__i__s_exp_p_Context(_parentctx, _parentState);
					_localctx.nempty_seplist_o__i__s__i__s_exp_p__1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nempty_seplist_o__i__s__i__s_exp_p_);
					State = 394;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 395;
					Match(T__19);
					State = 396;
					_localctx.nempty_seplist_o__i__s__i__s_exp_p__1__3 = exp();
					 _localctx.result =  (MyList<expr>) appendList<expr>((MyList<expr>) _localctx.nempty_seplist_o__i__s__i__s_exp_p__1__1.result, (expr) _localctx.nempty_seplist_o__i__s__i__s_exp_p__1__3.result);
					                      
					}
					} 
				}
				State = 403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_Context : ParserRuleContext {
		public MyList<expr> result;
		public Nempty_seplist_o__i__s__i__s_exp_p_Context allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p__1__1;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o__i__s__i__s_exp_p_Context nempty_seplist_o__i__s__i__s_exp_p_() {
			return GetRuleContext<Nempty_seplist_o__i__s__i__s_exp_p_Context>(0);
		}
		public Allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterAllow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitAllow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_(this);
		}
	}

	[RuleVersion(0)]
	public Allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_Context allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_() {
		Allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_Context _localctx = new Allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_Context(Context, State);
		EnterRule(_localctx, 56, RULE_allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_);
		try {
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				 _localctx.result =  new MyList<expr> {  };
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405;
				_localctx.allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p__1__1 = nempty_seplist_o__i__s__i__s_exp_p_(0);
				 _localctx.result =  _localctx.allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p__1__1.result;
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seplist_o__i__s__i__s_exp_p_Context : ParserRuleContext {
		public MyList<expr> result;
		public Allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_Context seplist_o__i__s__i__s_exp_p__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public Allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_Context allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_() {
			return GetRuleContext<Allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_Context>(0);
		}
		public Seplist_o__i__s__i__s_exp_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seplist_o__i__s__i__s_exp_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterSeplist_o__i__s__i__s_exp_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitSeplist_o__i__s__i__s_exp_p_(this);
		}
	}

	[RuleVersion(0)]
	public Seplist_o__i__s__i__s_exp_p_Context seplist_o__i__s__i__s_exp_p_() {
		Seplist_o__i__s__i__s_exp_p_Context _localctx = new Seplist_o__i__s__i__s_exp_p_Context(Context, State);
		EnterRule(_localctx, 58, RULE_seplist_o__i__s__i__s_exp_p_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_localctx.seplist_o__i__s__i__s_exp_p__0__1 = allow_empty_o_nempty_seplist_o__i__s__i__s_exp_p__p_();
			 _localctx.result =  _localctx.seplist_o__i__s__i__s_exp_p__0__1.result;
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public arguments result;
		public IToken args_0__1;
		public Seplist_o__i__s__i__s_exp_p_Context args_0__2;
		public TableconstructorContext args_1__1;
		public IToken args_2__1;
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_o__i__s__i__s_exp_p_Context seplist_o__i__s__i__s_exp_p_() {
			return GetRuleContext<Seplist_o__i__s__i__s_exp_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_LIT() { return GetToken(luaParser.STR_LIT, 0); }
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 60, RULE_args);
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 413;
				_localctx.args_0__1 = Match(T__17);
				State = 414;
				_localctx.args_0__2 = seplist_o__i__s__i__s_exp_p_();
				State = 415;
				Match(T__18);
				 _localctx.result =  (arguments) PositionalArgs((IToken) _localctx.args_0__1, (MyList<expr>) _localctx.args_0__2.result);
				            
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418;
				_localctx.args_1__1 = tableconstructor();
				 _localctx.result =  (arguments) TableArgs((table) _localctx.args_1__1.result);
				            
				}
				break;
			case STR_LIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 421;
				_localctx.args_2__1 = Match(STR_LIT);
				 _localctx.result =  (arguments) StringArg((IToken) _localctx.args_2__1);
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_o_funcname_p_Context : ParserRuleContext {
		public maybe<funcname> result;
		public FuncnameContext opt_o_funcname_p__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public Opt_o_funcname_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_o_funcname_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterOpt_o_funcname_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitOpt_o_funcname_p_(this);
		}
	}

	[RuleVersion(0)]
	public Opt_o_funcname_p_Context opt_o_funcname_p_() {
		Opt_o_funcname_p_Context _localctx = new Opt_o_funcname_p_Context(Context, State);
		EnterRule(_localctx, 62, RULE_opt_o_funcname_p_);
		try {
			State = 429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 425;
				_localctx.opt_o_funcname_p__0__1 = funcname(0);
				 _localctx.result =  (maybe<funcname>) some<funcname>((funcname) _localctx.opt_o_funcname_p__0__1.result);
				            
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<funcname>) none<funcname>();
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_o_parlist_p_Context : ParserRuleContext {
		public maybe<parameters> result;
		public ParlistContext opt_o_parlist_p__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public Opt_o_parlist_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_o_parlist_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterOpt_o_parlist_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitOpt_o_parlist_p_(this);
		}
	}

	[RuleVersion(0)]
	public Opt_o_parlist_p_Context opt_o_parlist_p_() {
		Opt_o_parlist_p_Context _localctx = new Opt_o_parlist_p_Context(Context, State);
		EnterRule(_localctx, 64, RULE_opt_o_parlist_p_);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__34:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431;
				_localctx.opt_o_parlist_p__0__1 = parlist();
				 _localctx.result =  (maybe<parameters>) some<parameters>((parameters) _localctx.opt_o_parlist_p__0__1.result);
				            
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<parameters>) none<parameters>();
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		public expr result;
		public IToken functiondef_0__1;
		public Opt_o_funcname_p_Context functiondef_0__2;
		public Opt_o_parlist_p_Context functiondef_0__4;
		public BlockContext functiondef_0__6;
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o_funcname_p_Context opt_o_funcname_p_() {
			return GetRuleContext<Opt_o_funcname_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o_parlist_p_Context opt_o_parlist_p_() {
			return GetRuleContext<Opt_o_parlist_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 66, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			_localctx.functiondef_0__1 = Match(T__16);
			State = 438;
			_localctx.functiondef_0__2 = opt_o_funcname_p_();
			State = 439;
			Match(T__17);
			State = 440;
			_localctx.functiondef_0__4 = opt_o_parlist_p_();
			State = 441;
			Match(T__18);
			State = 442;
			_localctx.functiondef_0__6 = block();
			State = 443;
			Match(T__7);
			 _localctx.result =  (expr) FuncDef((IToken) _localctx.functiondef_0__1, (bool) false, (maybe<funcname>) _localctx.functiondef_0__2.result, (maybe<parameters>) _localctx.functiondef_0__4.result, (block) _localctx.functiondef_0__6.result);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarargsContext : ParserRuleContext {
		public maybe<IToken> result;
		public IToken varargs_0__2;
		public VarargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterVarargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitVarargs(this);
		}
	}

	[RuleVersion(0)]
	public VarargsContext varargs() {
		VarargsContext _localctx = new VarargsContext(Context, State);
		EnterRule(_localctx, 68, RULE_varargs);
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				Match(T__19);
				State = 447;
				_localctx.varargs_0__2 = Match(T__34);
				 _localctx.result =  (maybe<IToken>) some<IToken>((IToken) _localctx.varargs_0__2);
				            
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<IToken>) none<IToken>();
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nempty_seplist_o__i__s__i__s__i_name_k__p_Context : ParserRuleContext {
		public MyList<IToken> result;
		public Nempty_seplist_o__i__s__i__s__i_name_k__p_Context nempty_seplist_o__i__s__i__s__i_name_k__p__1__1;
		public IToken nempty_seplist_o__i__s__i__s__i_name_k__p__0__1;
		public IToken nempty_seplist_o__i__s__i__s__i_name_k__p__1__3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(luaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o__i__s__i__s__i_name_k__p_Context nempty_seplist_o__i__s__i__s__i_name_k__p_() {
			return GetRuleContext<Nempty_seplist_o__i__s__i__s__i_name_k__p_Context>(0);
		}
		public Nempty_seplist_o__i__s__i__s__i_name_k__p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nempty_seplist_o__i__s__i__s__i_name_k__p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterNempty_seplist_o__i__s__i__s__i_name_k__p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitNempty_seplist_o__i__s__i__s__i_name_k__p_(this);
		}
	}

	[RuleVersion(0)]
	public Nempty_seplist_o__i__s__i__s__i_name_k__p_Context nempty_seplist_o__i__s__i__s__i_name_k__p_() {
		return nempty_seplist_o__i__s__i__s__i_name_k__p_(0);
	}

	private Nempty_seplist_o__i__s__i__s__i_name_k__p_Context nempty_seplist_o__i__s__i__s__i_name_k__p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nempty_seplist_o__i__s__i__s__i_name_k__p_Context _localctx = new Nempty_seplist_o__i__s__i__s__i_name_k__p_Context(Context, _parentState);
		Nempty_seplist_o__i__s__i__s__i_name_k__p_Context _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_nempty_seplist_o__i__s__i__s__i_name_k__p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 453;
			_localctx.nempty_seplist_o__i__s__i__s__i_name_k__p__0__1 = Match(NAME);
			 _localctx.result =  new MyList<IToken> { _localctx.nempty_seplist_o__i__s__i__s__i_name_k__p__0__1 };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 462;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nempty_seplist_o__i__s__i__s__i_name_k__p_Context(_parentctx, _parentState);
					_localctx.nempty_seplist_o__i__s__i__s__i_name_k__p__1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nempty_seplist_o__i__s__i__s__i_name_k__p_);
					State = 456;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 457;
					Match(T__19);
					State = 458;
					_localctx.nempty_seplist_o__i__s__i__s__i_name_k__p__1__3 = Match(NAME);
					 _localctx.result =  (MyList<IToken>) appendList<IToken>((MyList<IToken>) _localctx.nempty_seplist_o__i__s__i__s__i_name_k__p__1__1.result, (IToken) _localctx.nempty_seplist_o__i__s__i__s__i_name_k__p__1__3);
					                      
					}
					} 
				}
				State = 464;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		public parameters result;
		public IToken parlist_0__1;
		public Nempty_seplist_o__i__s__i__s__i_name_k__p_Context parlist_1__1;
		public VarargsContext parlist_1__2;
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o__i__s__i__s__i_name_k__p_Context nempty_seplist_o__i__s__i__s__i_name_k__p_() {
			return GetRuleContext<Nempty_seplist_o__i__s__i__s__i_name_k__p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarargsContext varargs() {
			return GetRuleContext<VarargsContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 72, RULE_parlist);
		try {
			State = 471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__34:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465;
				_localctx.parlist_0__1 = Match(T__34);
				 _localctx.result =  (parameters) paramsv((MyList<IToken>) new MyList<IToken> {  }, (maybe<IToken>) (maybe<IToken>) some<IToken>((IToken) _localctx.parlist_0__1));
				            
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 467;
				_localctx.parlist_1__1 = nempty_seplist_o__i__s__i__s__i_name_k__p_(0);
				State = 468;
				_localctx.parlist_1__2 = varargs();
				 _localctx.result =  (parameters) paramsv((MyList<IToken>) _localctx.parlist_1__1.result, (maybe<IToken>) _localctx.parlist_1__2.result);
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nempty_seplist_o_fieldsep_s_field_p_Context : ParserRuleContext {
		public MyList<table_field> result;
		public Nempty_seplist_o_fieldsep_s_field_p_Context nempty_seplist_o_fieldsep_s_field_p__1__1;
		public FieldContext nempty_seplist_o_fieldsep_s_field_p__0__1;
		public FieldContext nempty_seplist_o_fieldsep_s_field_p__1__3;
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep() {
			return GetRuleContext<FieldsepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o_fieldsep_s_field_p_Context nempty_seplist_o_fieldsep_s_field_p_() {
			return GetRuleContext<Nempty_seplist_o_fieldsep_s_field_p_Context>(0);
		}
		public Nempty_seplist_o_fieldsep_s_field_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nempty_seplist_o_fieldsep_s_field_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterNempty_seplist_o_fieldsep_s_field_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitNempty_seplist_o_fieldsep_s_field_p_(this);
		}
	}

	[RuleVersion(0)]
	public Nempty_seplist_o_fieldsep_s_field_p_Context nempty_seplist_o_fieldsep_s_field_p_() {
		return nempty_seplist_o_fieldsep_s_field_p_(0);
	}

	private Nempty_seplist_o_fieldsep_s_field_p_Context nempty_seplist_o_fieldsep_s_field_p_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Nempty_seplist_o_fieldsep_s_field_p_Context _localctx = new Nempty_seplist_o_fieldsep_s_field_p_Context(Context, _parentState);
		Nempty_seplist_o_fieldsep_s_field_p_Context _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_nempty_seplist_o_fieldsep_s_field_p_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 474;
			_localctx.nempty_seplist_o_fieldsep_s_field_p__0__1 = field();
			 _localctx.result =  new MyList<table_field> { _localctx.nempty_seplist_o_fieldsep_s_field_p__0__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 484;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Nempty_seplist_o_fieldsep_s_field_p_Context(_parentctx, _parentState);
					_localctx.nempty_seplist_o_fieldsep_s_field_p__1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nempty_seplist_o_fieldsep_s_field_p_);
					State = 477;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 478;
					fieldsep();
					State = 479;
					_localctx.nempty_seplist_o_fieldsep_s_field_p__1__3 = field();
					 _localctx.result =  (MyList<table_field>) appendList<table_field>((MyList<table_field>) _localctx.nempty_seplist_o_fieldsep_s_field_p__1__1.result, (table_field) _localctx.nempty_seplist_o_fieldsep_s_field_p__1__3.result);
					                      
					}
					} 
				}
				State = 486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Opt_o_fieldsep_p_Context : ParserRuleContext {
		public maybe<int> result;
		public FieldsepContext opt_o_fieldsep_p__0__1;
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep() {
			return GetRuleContext<FieldsepContext>(0);
		}
		public Opt_o_fieldsep_p_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_o_fieldsep_p_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterOpt_o_fieldsep_p_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitOpt_o_fieldsep_p_(this);
		}
	}

	[RuleVersion(0)]
	public Opt_o_fieldsep_p_Context opt_o_fieldsep_p_() {
		Opt_o_fieldsep_p_Context _localctx = new Opt_o_fieldsep_p_Context(Context, State);
		EnterRule(_localctx, 76, RULE_opt_o_fieldsep_p_);
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 487;
				_localctx.opt_o_fieldsep_p__0__1 = fieldsep();
				 _localctx.result =  (maybe<int>) some<int>((int) _localctx.opt_o_fieldsep_p__0__1.result);
				            
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 2);
				{
				 _localctx.result =  (maybe<int>) none<int>();
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		public table result;
		public IToken tableconstructor_0__1;
		public Nempty_seplist_o_fieldsep_s_field_p_Context tableconstructor_0__2;
		public IToken tableconstructor_1__1;
		[System.Diagnostics.DebuggerNonUserCode] public Opt_o_fieldsep_p_Context opt_o_fieldsep_p_() {
			return GetRuleContext<Opt_o_fieldsep_p_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nempty_seplist_o_fieldsep_s_field_p_Context nempty_seplist_o_fieldsep_s_field_p_() {
			return GetRuleContext<Nempty_seplist_o_fieldsep_s_field_p_Context>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 78, RULE_tableconstructor);
		try {
			State = 502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493;
				_localctx.tableconstructor_0__1 = Match(T__35);
				State = 494;
				_localctx.tableconstructor_0__2 = nempty_seplist_o_fieldsep_s_field_p_(0);
				State = 495;
				opt_o_fieldsep_p_();
				State = 496;
				Match(T__36);
				 _localctx.result =  (table) TableConstructor((IToken) _localctx.tableconstructor_0__1, (MyList<table_field>) _localctx.tableconstructor_0__2.result);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 499;
				_localctx.tableconstructor_1__1 = Match(T__35);
				State = 500;
				Match(T__36);
				 _localctx.result =  (table) TableConstructor((IToken) _localctx.tableconstructor_1__1, (MyList<table_field>) new MyList<table_field> {  });
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public funcname result;
		public FuncnameContext funcname_0__1;
		public FuncnameContext funcname_1__1;
		public IToken funcname_2__1;
		public IToken funcname_0__3;
		public IToken funcname_1__3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(luaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		return funcname(0);
	}

	private FuncnameContext funcname(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FuncnameContext _localctx = new FuncnameContext(Context, _parentState);
		FuncnameContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_funcname, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 505;
			_localctx.funcname_2__1 = Match(NAME);
			 _localctx.result =  (funcname) VarName((IToken) _localctx.funcname_2__1);
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 518;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 516;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new FuncnameContext(_parentctx, _parentState);
						_localctx.funcname_0__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_funcname);
						State = 508;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 509;
						Match(T__30);
						State = 510;
						_localctx.funcname_0__3 = Match(NAME);
						 _localctx.result =  (funcname) DotName((funcname) _localctx.funcname_0__1.result, (IToken) _localctx.funcname_0__3);
						                      
						}
						break;
					case 2:
						{
						_localctx = new FuncnameContext(_parentctx, _parentState);
						_localctx.funcname_1__1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_funcname);
						State = 512;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 513;
						Match(T__27);
						State = 514;
						_localctx.funcname_1__3 = Match(NAME);
						 _localctx.result =  (funcname) MethodName((funcname) _localctx.funcname_1__1.result, (IToken) _localctx.funcname_1__3);
						                      
						}
						break;
					}
					} 
				}
				State = 520;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public table_field result;
		public IToken field_0__1;
		public ExpContext field_0__2;
		public ExpContext field_0__5;
		public IToken field_1__1;
		public ExpContext field_1__3;
		public ExpContext field_2__1;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(luaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 82, RULE_field);
		try {
			State = 536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521;
				_localctx.field_0__1 = Match(T__28);
				State = 522;
				_localctx.field_0__2 = exp();
				State = 523;
				Match(T__29);
				State = 524;
				Match(T__2);
				State = 525;
				_localctx.field_0__5 = exp();
				 _localctx.result =  (table_field) IndexField((IToken) _localctx.field_0__1, (expr) _localctx.field_0__2.result, (expr) _localctx.field_0__5.result);
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 528;
				_localctx.field_1__1 = Match(NAME);
				State = 529;
				Match(T__2);
				State = 530;
				_localctx.field_1__3 = exp();
				 _localctx.result =  (table_field) NameField((IToken) _localctx.field_1__1, (expr) _localctx.field_1__3.result);
				            
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 533;
				_localctx.field_2__1 = exp();
				 _localctx.result =  (table_field) ElementField((expr) _localctx.field_2__1.result);
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public int result;
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 84, RULE_fieldsep);
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 538;
				Match(T__19);
				 _localctx.result =  0;
				            
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540;
				Match(T__0);
				 _localctx.result =  0;
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		public Op<expr> result;
		public IToken binop_0__1;
		public IToken binop_1__1;
		public IToken binop_2__1;
		public IToken binop_3__1;
		public IToken binop_4__1;
		public IToken binop_5__1;
		public IToken binop_6__1;
		public IToken binop_7__1;
		public IToken binop_8__1;
		public IToken binop_9__1;
		public IToken binop_10__1;
		public IToken binop_11__1;
		public IToken binop_12__1;
		public IToken binop_13__1;
		public IToken binop_14__1;
		public IToken binop_15__1;
		public IToken binop_16__1;
		public IToken binop_17__1;
		public IToken binop_18__1;
		public IToken binop_19__1;
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.EnterBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IluaListener typedListener = listener as IluaListener;
			if (typedListener != null) typedListener.ExitBinop(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 86, RULE_binop);
		try {
			State = 584;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__37:
				EnterOuterAlt(_localctx, 1);
				{
				State = 544;
				_localctx.binop_0__1 = Match(T__37);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_0__1);
				            
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 2);
				{
				State = 546;
				_localctx.binop_1__1 = Match(T__38);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_1__1);
				            
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 3);
				{
				State = 548;
				_localctx.binop_2__1 = Match(T__39);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_2__1);
				            
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 4);
				{
				State = 550;
				_localctx.binop_3__1 = Match(T__40);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_3__1);
				            
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 5);
				{
				State = 552;
				_localctx.binop_4__1 = Match(T__41);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_4__1);
				            
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 6);
				{
				State = 554;
				_localctx.binop_5__1 = Match(T__42);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_5__1);
				            
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 7);
				{
				State = 556;
				_localctx.binop_6__1 = Match(T__43);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_6__1);
				            
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 8);
				{
				State = 558;
				_localctx.binop_7__1 = Match(T__44);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_7__1);
				            
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 9);
				{
				State = 560;
				_localctx.binop_8__1 = Match(T__45);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_8__1);
				            
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 10);
				{
				State = 562;
				_localctx.binop_9__1 = Match(T__24);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_9__1);
				            
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 11);
				{
				State = 564;
				_localctx.binop_10__1 = Match(T__46);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_10__1);
				            
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 12);
				{
				State = 566;
				_localctx.binop_11__1 = Match(T__47);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_11__1);
				            
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 13);
				{
				State = 568;
				_localctx.binop_12__1 = Match(T__48);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_12__1);
				            
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 14);
				{
				State = 570;
				_localctx.binop_13__1 = Match(T__49);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_13__1);
				            
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 15);
				{
				State = 572;
				_localctx.binop_14__1 = Match(T__50);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_14__1);
				            
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 16);
				{
				State = 574;
				_localctx.binop_15__1 = Match(T__23);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_15__1);
				            
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 17);
				{
				State = 576;
				_localctx.binop_16__1 = Match(T__51);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_16__1);
				            
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 18);
				{
				State = 578;
				_localctx.binop_17__1 = Match(T__52);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_17__1);
				            
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 19);
				{
				State = 580;
				_localctx.binop_18__1 = Match(T__53);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_18__1);
				            
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 20);
				{
				State = 582;
				_localctx.binop_19__1 = Match(T__54);
				 _localctx.result =  (Op<expr>) mkOperator<expr>((IToken) _localctx.binop_19__1);
				            
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return nempty_list_o_stat_p__sempred((Nempty_list_o_stat_p_Context)_localctx, predIndex);
		case 9: return nempty_list_o_elseif_p__sempred((Nempty_list_o_elseif_p_Context)_localctx, predIndex);
		case 21: return binseq_sempred((BinseqContext)_localctx, predIndex);
		case 25: return prefixexp_sempred((PrefixexpContext)_localctx, predIndex);
		case 27: return nempty_seplist_o__i__s__i__s_exp_p__sempred((Nempty_seplist_o__i__s__i__s_exp_p_Context)_localctx, predIndex);
		case 35: return nempty_seplist_o__i__s__i__s__i_name_k__p__sempred((Nempty_seplist_o__i__s__i__s__i_name_k__p_Context)_localctx, predIndex);
		case 37: return nempty_seplist_o_fieldsep_s_field_p__sempred((Nempty_seplist_o_fieldsep_s_field_p_Context)_localctx, predIndex);
		case 40: return funcname_sempred((FuncnameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool nempty_list_o_stat_p__sempred(Nempty_list_o_stat_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool nempty_list_o_elseif_p__sempred(Nempty_list_o_elseif_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool binseq_sempred(BinseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool prefixexp_sempred(PrefixexpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool nempty_seplist_o__i__s__i__s_exp_p__sempred(Nempty_seplist_o__i__s__i__s_exp_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool nempty_seplist_o__i__s__i__s__i_name_k__p__sempred(Nempty_seplist_o__i__s__i__s__i_name_k__p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 1);
		}
		return true;
	}
	private bool nempty_seplist_o_fieldsep_s_field_p__sempred(Nempty_seplist_o_fieldsep_s_field_p_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool funcname_sempred(FuncnameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,61,587,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		5,2,104,8,2,10,2,12,2,107,9,2,1,3,1,3,1,3,1,3,3,3,113,8,3,1,4,1,4,1,4,
		1,5,1,5,1,5,1,5,3,5,122,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,3,7,131,8,7,1,
		8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,146,8,9,10,9,12,
		9,149,9,9,1,10,1,10,1,10,1,10,3,10,155,8,10,1,11,1,11,1,11,1,12,1,12,1,
		12,1,12,3,12,164,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,
		245,8,13,1,14,1,14,1,14,1,14,1,14,3,14,252,8,14,1,15,1,15,1,15,1,15,1,
		15,1,15,1,16,1,16,1,16,1,16,1,16,3,16,265,8,16,1,17,1,17,1,17,1,17,1,17,
		1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,5,21,292,8,21,10,21,12,21,295,9,21,1,22,
		1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,319,8,23,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,1,24,3,24,329,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,3,25,342,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,364,8,25,
		10,25,12,25,367,9,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,389,8,26,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,400,8,27,10,27,12,27,403,9,
		27,1,28,1,28,1,28,1,28,3,28,409,8,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,3,30,424,8,30,1,31,1,31,1,31,1,31,3,31,430,
		8,31,1,32,1,32,1,32,1,32,3,32,436,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,451,8,34,1,35,1,35,1,35,1,35,1,35,
		1,35,1,35,1,35,5,35,461,8,35,10,35,12,35,464,9,35,1,36,1,36,1,36,1,36,
		1,36,1,36,3,36,472,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,
		37,483,8,37,10,37,12,37,486,9,37,1,38,1,38,1,38,1,38,3,38,492,8,38,1,39,
		1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,503,8,39,1,40,1,40,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,517,8,40,10,40,12,40,520,
		9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,3,41,537,8,41,1,42,1,42,1,42,1,42,3,42,543,8,42,1,43,1,43,1,
		43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,585,8,43,1,43,0,8,
		4,18,42,50,54,70,74,80,44,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,0,0,620,0,88,1,0,0,0,2,92,1,0,0,0,4,95,1,0,0,0,6,112,1,0,0,0,
		8,114,1,0,0,0,10,121,1,0,0,0,12,123,1,0,0,0,14,130,1,0,0,0,16,132,1,0,
		0,0,18,137,1,0,0,0,20,154,1,0,0,0,22,156,1,0,0,0,24,163,1,0,0,0,26,244,
		1,0,0,0,28,251,1,0,0,0,30,253,1,0,0,0,32,264,1,0,0,0,34,266,1,0,0,0,36,
		272,1,0,0,0,38,276,1,0,0,0,40,279,1,0,0,0,42,282,1,0,0,0,44,296,1,0,0,
		0,46,318,1,0,0,0,48,328,1,0,0,0,50,341,1,0,0,0,52,388,1,0,0,0,54,390,1,
		0,0,0,56,408,1,0,0,0,58,410,1,0,0,0,60,423,1,0,0,0,62,429,1,0,0,0,64,435,
		1,0,0,0,66,437,1,0,0,0,68,450,1,0,0,0,70,452,1,0,0,0,72,471,1,0,0,0,74,
		473,1,0,0,0,76,491,1,0,0,0,78,502,1,0,0,0,80,504,1,0,0,0,82,536,1,0,0,
		0,84,542,1,0,0,0,86,584,1,0,0,0,88,89,3,2,1,0,89,90,5,0,0,1,90,91,6,0,
		-1,0,91,1,1,0,0,0,92,93,3,12,6,0,93,94,6,1,-1,0,94,3,1,0,0,0,95,96,6,2,
		-1,0,96,97,3,26,13,0,97,98,6,2,-1,0,98,105,1,0,0,0,99,100,10,1,0,0,100,
		101,3,26,13,0,101,102,6,2,-1,0,102,104,1,0,0,0,103,99,1,0,0,0,104,107,
		1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,5,1,0,0,0,107,105,1,0,0,0,
		108,113,6,3,-1,0,109,110,3,4,2,0,110,111,6,3,-1,0,111,113,1,0,0,0,112,
		108,1,0,0,0,112,109,1,0,0,0,113,7,1,0,0,0,114,115,3,6,3,0,115,116,6,4,
		-1,0,116,9,1,0,0,0,117,118,3,16,8,0,118,119,6,5,-1,0,119,122,1,0,0,0,120,
		122,6,5,-1,0,121,117,1,0,0,0,121,120,1,0,0,0,122,11,1,0,0,0,123,124,3,
		8,4,0,124,125,3,10,5,0,125,126,6,6,-1,0,126,13,1,0,0,0,127,128,5,1,0,0,
		128,131,6,7,-1,0,129,131,6,7,-1,0,130,127,1,0,0,0,130,129,1,0,0,0,131,
		15,1,0,0,0,132,133,5,2,0,0,133,134,3,58,29,0,134,135,3,14,7,0,135,136,
		6,8,-1,0,136,17,1,0,0,0,137,138,6,9,-1,0,138,139,3,34,17,0,139,140,6,9,
		-1,0,140,147,1,0,0,0,141,142,10,1,0,0,142,143,3,34,17,0,143,144,6,9,-1,
		0,144,146,1,0,0,0,145,141,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,
		148,1,0,0,0,148,19,1,0,0,0,149,147,1,0,0,0,150,155,6,10,-1,0,151,152,3,
		18,9,0,152,153,6,10,-1,0,153,155,1,0,0,0,154,150,1,0,0,0,154,151,1,0,0,
		0,155,21,1,0,0,0,156,157,3,20,10,0,157,158,6,11,-1,0,158,23,1,0,0,0,159,
		160,3,36,18,0,160,161,6,12,-1,0,161,164,1,0,0,0,162,164,6,12,-1,0,163,
		159,1,0,0,0,163,162,1,0,0,0,164,25,1,0,0,0,165,166,5,1,0,0,166,245,6,13,
		-1,0,167,168,3,54,27,0,168,169,5,3,0,0,169,170,3,54,27,0,170,171,6,13,
		-1,0,171,245,1,0,0,0,172,173,3,38,19,0,173,174,6,13,-1,0,174,245,1,0,0,
		0,175,176,5,4,0,0,176,177,5,58,0,0,177,178,5,4,0,0,178,245,6,13,-1,0,179,
		180,5,5,0,0,180,245,6,13,-1,0,181,182,5,6,0,0,182,183,5,58,0,0,183,245,
		6,13,-1,0,184,185,5,7,0,0,185,186,3,12,6,0,186,187,5,8,0,0,187,188,6,13,
		-1,0,188,245,1,0,0,0,189,190,5,9,0,0,190,191,3,38,19,0,191,192,5,7,0,0,
		192,193,3,12,6,0,193,194,5,8,0,0,194,195,6,13,-1,0,195,245,1,0,0,0,196,
		197,5,10,0,0,197,198,3,12,6,0,198,199,5,11,0,0,199,200,3,38,19,0,200,201,
		6,13,-1,0,201,245,1,0,0,0,202,203,5,12,0,0,203,204,3,38,19,0,204,205,5,
		13,0,0,205,206,3,12,6,0,206,207,3,22,11,0,207,208,3,24,12,0,208,209,5,
		8,0,0,209,210,6,13,-1,0,210,245,1,0,0,0,211,212,5,14,0,0,212,213,5,58,
		0,0,213,214,5,3,0,0,214,215,3,30,15,0,215,216,5,7,0,0,216,217,3,12,6,0,
		217,218,5,8,0,0,218,219,6,13,-1,0,219,245,1,0,0,0,220,221,5,14,0,0,221,
		222,3,70,35,0,222,223,5,15,0,0,223,224,3,54,27,0,224,225,5,7,0,0,225,226,
		3,12,6,0,226,227,5,8,0,0,227,228,6,13,-1,0,228,245,1,0,0,0,229,230,5,16,
		0,0,230,231,5,17,0,0,231,232,3,80,40,0,232,233,5,18,0,0,233,234,3,64,32,
		0,234,235,5,19,0,0,235,236,3,12,6,0,236,237,5,8,0,0,237,238,6,13,-1,0,
		238,245,1,0,0,0,239,240,5,16,0,0,240,241,3,70,35,0,241,242,3,28,14,0,242,
		243,6,13,-1,0,243,245,1,0,0,0,244,165,1,0,0,0,244,167,1,0,0,0,244,172,
		1,0,0,0,244,175,1,0,0,0,244,179,1,0,0,0,244,181,1,0,0,0,244,184,1,0,0,
		0,244,189,1,0,0,0,244,196,1,0,0,0,244,202,1,0,0,0,244,211,1,0,0,0,244,
		220,1,0,0,0,244,229,1,0,0,0,244,239,1,0,0,0,245,27,1,0,0,0,246,247,5,3,
		0,0,247,248,3,54,27,0,248,249,6,14,-1,0,249,252,1,0,0,0,250,252,6,14,-1,
		0,251,246,1,0,0,0,251,250,1,0,0,0,252,29,1,0,0,0,253,254,3,38,19,0,254,
		255,5,20,0,0,255,256,3,38,19,0,256,257,3,32,16,0,257,258,6,15,-1,0,258,
		31,1,0,0,0,259,260,5,20,0,0,260,261,3,38,19,0,261,262,6,16,-1,0,262,265,
		1,0,0,0,263,265,6,16,-1,0,264,259,1,0,0,0,264,263,1,0,0,0,265,33,1,0,0,
		0,266,267,5,21,0,0,267,268,3,38,19,0,268,269,5,13,0,0,269,270,3,12,6,0,
		270,271,6,17,-1,0,271,35,1,0,0,0,272,273,5,22,0,0,273,274,3,12,6,0,274,
		275,6,18,-1,0,275,37,1,0,0,0,276,277,3,40,20,0,277,278,6,19,-1,0,278,39,
		1,0,0,0,279,280,3,42,21,0,280,281,6,20,-1,0,281,41,1,0,0,0,282,283,6,21,
		-1,0,283,284,3,44,22,0,284,285,6,21,-1,0,285,293,1,0,0,0,286,287,10,2,
		0,0,287,288,3,86,43,0,288,289,3,44,22,0,289,290,6,21,-1,0,290,292,1,0,
		0,0,291,286,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,
		43,1,0,0,0,295,293,1,0,0,0,296,297,3,46,23,0,297,298,6,22,-1,0,298,45,
		1,0,0,0,299,300,5,23,0,0,300,301,3,48,24,0,301,302,6,23,-1,0,302,319,1,
		0,0,0,303,304,5,24,0,0,304,305,3,48,24,0,305,306,6,23,-1,0,306,319,1,0,
		0,0,307,308,5,25,0,0,308,309,3,48,24,0,309,310,6,23,-1,0,310,319,1,0,0,
		0,311,312,5,26,0,0,312,313,3,48,24,0,313,314,6,23,-1,0,314,319,1,0,0,0,
		315,316,3,48,24,0,316,317,6,23,-1,0,317,319,1,0,0,0,318,299,1,0,0,0,318,
		303,1,0,0,0,318,307,1,0,0,0,318,311,1,0,0,0,318,315,1,0,0,0,319,47,1,0,
		0,0,320,321,3,50,25,0,321,322,5,27,0,0,322,323,3,48,24,0,323,324,6,24,
		-1,0,324,329,1,0,0,0,325,326,3,50,25,0,326,327,6,24,-1,0,327,329,1,0,0,
		0,328,320,1,0,0,0,328,325,1,0,0,0,329,49,1,0,0,0,330,331,6,25,-1,0,331,
		332,5,58,0,0,332,342,6,25,-1,0,333,334,5,18,0,0,334,335,3,38,19,0,335,
		336,5,19,0,0,336,337,6,25,-1,0,337,342,1,0,0,0,338,339,3,52,26,0,339,340,
		6,25,-1,0,340,342,1,0,0,0,341,330,1,0,0,0,341,333,1,0,0,0,341,338,1,0,
		0,0,342,365,1,0,0,0,343,344,10,5,0,0,344,345,3,60,30,0,345,346,6,25,-1,
		0,346,364,1,0,0,0,347,348,10,4,0,0,348,349,5,28,0,0,349,350,5,58,0,0,350,
		351,3,60,30,0,351,352,6,25,-1,0,352,364,1,0,0,0,353,354,10,3,0,0,354,355,
		5,29,0,0,355,356,3,38,19,0,356,357,5,30,0,0,357,358,6,25,-1,0,358,364,
		1,0,0,0,359,360,10,2,0,0,360,361,5,31,0,0,361,362,5,58,0,0,362,364,6,25,
		-1,0,363,343,1,0,0,0,363,347,1,0,0,0,363,353,1,0,0,0,363,359,1,0,0,0,364,
		367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,51,1,0,0,0,367,365,1,0,
		0,0,368,369,5,32,0,0,369,389,6,26,-1,0,370,371,5,33,0,0,371,389,6,26,-1,
		0,372,373,5,34,0,0,373,389,6,26,-1,0,374,375,5,59,0,0,375,389,6,26,-1,
		0,376,377,5,60,0,0,377,389,6,26,-1,0,378,379,5,61,0,0,379,389,6,26,-1,
		0,380,381,5,35,0,0,381,389,6,26,-1,0,382,383,3,66,33,0,383,384,6,26,-1,
		0,384,389,1,0,0,0,385,386,3,78,39,0,386,387,6,26,-1,0,387,389,1,0,0,0,
		388,368,1,0,0,0,388,370,1,0,0,0,388,372,1,0,0,0,388,374,1,0,0,0,388,376,
		1,0,0,0,388,378,1,0,0,0,388,380,1,0,0,0,388,382,1,0,0,0,388,385,1,0,0,
		0,389,53,1,0,0,0,390,391,6,27,-1,0,391,392,3,38,19,0,392,393,6,27,-1,0,
		393,401,1,0,0,0,394,395,10,1,0,0,395,396,5,20,0,0,396,397,3,38,19,0,397,
		398,6,27,-1,0,398,400,1,0,0,0,399,394,1,0,0,0,400,403,1,0,0,0,401,399,
		1,0,0,0,401,402,1,0,0,0,402,55,1,0,0,0,403,401,1,0,0,0,404,409,6,28,-1,
		0,405,406,3,54,27,0,406,407,6,28,-1,0,407,409,1,0,0,0,408,404,1,0,0,0,
		408,405,1,0,0,0,409,57,1,0,0,0,410,411,3,56,28,0,411,412,6,29,-1,0,412,
		59,1,0,0,0,413,414,5,18,0,0,414,415,3,58,29,0,415,416,5,19,0,0,416,417,
		6,30,-1,0,417,424,1,0,0,0,418,419,3,78,39,0,419,420,6,30,-1,0,420,424,
		1,0,0,0,421,422,5,60,0,0,422,424,6,30,-1,0,423,413,1,0,0,0,423,418,1,0,
		0,0,423,421,1,0,0,0,424,61,1,0,0,0,425,426,3,80,40,0,426,427,6,31,-1,0,
		427,430,1,0,0,0,428,430,6,31,-1,0,429,425,1,0,0,0,429,428,1,0,0,0,430,
		63,1,0,0,0,431,432,3,72,36,0,432,433,6,32,-1,0,433,436,1,0,0,0,434,436,
		6,32,-1,0,435,431,1,0,0,0,435,434,1,0,0,0,436,65,1,0,0,0,437,438,5,17,
		0,0,438,439,3,62,31,0,439,440,5,18,0,0,440,441,3,64,32,0,441,442,5,19,
		0,0,442,443,3,12,6,0,443,444,5,8,0,0,444,445,6,33,-1,0,445,67,1,0,0,0,
		446,447,5,20,0,0,447,448,5,35,0,0,448,451,6,34,-1,0,449,451,6,34,-1,0,
		450,446,1,0,0,0,450,449,1,0,0,0,451,69,1,0,0,0,452,453,6,35,-1,0,453,454,
		5,58,0,0,454,455,6,35,-1,0,455,462,1,0,0,0,456,457,10,1,0,0,457,458,5,
		20,0,0,458,459,5,58,0,0,459,461,6,35,-1,0,460,456,1,0,0,0,461,464,1,0,
		0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,71,1,0,0,0,464,462,1,0,0,0,465,
		466,5,35,0,0,466,472,6,36,-1,0,467,468,3,70,35,0,468,469,3,68,34,0,469,
		470,6,36,-1,0,470,472,1,0,0,0,471,465,1,0,0,0,471,467,1,0,0,0,472,73,1,
		0,0,0,473,474,6,37,-1,0,474,475,3,82,41,0,475,476,6,37,-1,0,476,484,1,
		0,0,0,477,478,10,1,0,0,478,479,3,84,42,0,479,480,3,82,41,0,480,481,6,37,
		-1,0,481,483,1,0,0,0,482,477,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,
		485,1,0,0,0,485,75,1,0,0,0,486,484,1,0,0,0,487,488,3,84,42,0,488,489,6,
		38,-1,0,489,492,1,0,0,0,490,492,6,38,-1,0,491,487,1,0,0,0,491,490,1,0,
		0,0,492,77,1,0,0,0,493,494,5,36,0,0,494,495,3,74,37,0,495,496,3,76,38,
		0,496,497,5,37,0,0,497,498,6,39,-1,0,498,503,1,0,0,0,499,500,5,36,0,0,
		500,501,5,37,0,0,501,503,6,39,-1,0,502,493,1,0,0,0,502,499,1,0,0,0,503,
		79,1,0,0,0,504,505,6,40,-1,0,505,506,5,58,0,0,506,507,6,40,-1,0,507,518,
		1,0,0,0,508,509,10,3,0,0,509,510,5,31,0,0,510,511,5,58,0,0,511,517,6,40,
		-1,0,512,513,10,2,0,0,513,514,5,28,0,0,514,515,5,58,0,0,515,517,6,40,-1,
		0,516,508,1,0,0,0,516,512,1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,
		519,1,0,0,0,519,81,1,0,0,0,520,518,1,0,0,0,521,522,5,29,0,0,522,523,3,
		38,19,0,523,524,5,30,0,0,524,525,5,3,0,0,525,526,3,38,19,0,526,527,6,41,
		-1,0,527,537,1,0,0,0,528,529,5,58,0,0,529,530,5,3,0,0,530,531,3,38,19,
		0,531,532,6,41,-1,0,532,537,1,0,0,0,533,534,3,38,19,0,534,535,6,41,-1,
		0,535,537,1,0,0,0,536,521,1,0,0,0,536,528,1,0,0,0,536,533,1,0,0,0,537,
		83,1,0,0,0,538,539,5,20,0,0,539,543,6,42,-1,0,540,541,5,1,0,0,541,543,
		6,42,-1,0,542,538,1,0,0,0,542,540,1,0,0,0,543,85,1,0,0,0,544,545,5,38,
		0,0,545,585,6,43,-1,0,546,547,5,39,0,0,547,585,6,43,-1,0,548,549,5,40,
		0,0,549,585,6,43,-1,0,550,551,5,41,0,0,551,585,6,43,-1,0,552,553,5,42,
		0,0,553,585,6,43,-1,0,554,555,5,43,0,0,555,585,6,43,-1,0,556,557,5,44,
		0,0,557,585,6,43,-1,0,558,559,5,45,0,0,559,585,6,43,-1,0,560,561,5,46,
		0,0,561,585,6,43,-1,0,562,563,5,25,0,0,563,585,6,43,-1,0,564,565,5,47,
		0,0,565,585,6,43,-1,0,566,567,5,48,0,0,567,585,6,43,-1,0,568,569,5,49,
		0,0,569,585,6,43,-1,0,570,571,5,50,0,0,571,585,6,43,-1,0,572,573,5,51,
		0,0,573,585,6,43,-1,0,574,575,5,24,0,0,575,585,6,43,-1,0,576,577,5,52,
		0,0,577,585,6,43,-1,0,578,579,5,53,0,0,579,585,6,43,-1,0,580,581,5,54,
		0,0,581,585,6,43,-1,0,582,583,5,55,0,0,583,585,6,43,-1,0,584,544,1,0,0,
		0,584,546,1,0,0,0,584,548,1,0,0,0,584,550,1,0,0,0,584,552,1,0,0,0,584,
		554,1,0,0,0,584,556,1,0,0,0,584,558,1,0,0,0,584,560,1,0,0,0,584,562,1,
		0,0,0,584,564,1,0,0,0,584,566,1,0,0,0,584,568,1,0,0,0,584,570,1,0,0,0,
		584,572,1,0,0,0,584,574,1,0,0,0,584,576,1,0,0,0,584,578,1,0,0,0,584,580,
		1,0,0,0,584,582,1,0,0,0,585,87,1,0,0,0,33,105,112,121,130,147,154,163,
		244,251,264,293,318,328,341,363,365,388,401,408,423,429,435,450,462,471,
		484,491,502,516,518,536,542,584
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace lua
