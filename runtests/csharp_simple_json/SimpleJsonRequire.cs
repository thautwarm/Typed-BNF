/* line 156-179 is necessary for running the JSON parser generated by Typed BNF
  `class MyList` wraps `List` to achieve pretty printing.
*/
using System.Collections.Generic;
using System.Collections;
using Antlr4.Runtime;
using System;
using System.Linq;
using System.Diagnostics;


namespace SimpleJson;

public struct MyList<T> : System.Collections.IEnumerable
{
    public IEnumerator<T> GetEnumerator() => contents.GetEnumerator();
    private IEnumerator GetEnumerator1() => this.GetEnumerator();

    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator1();

    public void Add(T x) => contents.Add(x);

    List<T> contents;

    public MyList()
    {
        contents = new List<T>();
    }
    private MyList(MyList<T> x)
    {
        this.contents = x;
    }

    public override string ToString()
    {

        return "[" + System.String.Join(",", contents.Select(x => x.ToString())) + "]";
    }


    public static implicit operator List<T>(MyList<T> xs) => xs.contents;
    public static implicit operator MyList<T>(List<T> xs) => new MyList<T>(xs);
}

public partial interface JsonValue
{
    // public string show();

    public static JsonValue Parse(string s)
    {
        ICharStream stream = CharStreams.fromString(s);
        var lexer = new SimpleJsonLexer(stream);
        lexer.RemoveErrorListeners();
        lexer.AddErrorListener(new LexerErrorListener());
        ITokenStream tokens = new CommonTokenStream(lexer);
        var parser = new SimpleJsonParser(tokens);
        parser.RemoveErrorListeners();
        parser.AddErrorListener(new ExcErrorListener());
        parser.BuildParseTree = false;
        var result = parser.start().result;
        return result;
    }
}

public class App
{

    public static List<A> repeat<A>(A x, int n)
    {
        var ret = new List<A> { };
        for (var i = 0; i < n; i++)
        {
            ret.Add(x);
        }
        return ret;
    }
    public static void Main(string[] modes)
    {
        if (modes.Length == 2)
        {
            var texts = repeat(System.IO.File.ReadAllText(modes[0]), 100);
            var prevent_opt = new List<string>();
            List<long> times = new List<long>();
            foreach (var text in texts)
            {
                Stopwatch sw = new Stopwatch();
                sw.Start();
                var res = JsonValue.Parse(text);
                sw.Stop();
                times.Add(sw.ElapsedMilliseconds);
                prevent_opt.Add(System.String.Join("", res.ToString()));
            }
            System.IO.File.WriteAllText(modes[1], System.String.Join(",", times));
            return;
        }
        while (true)
        {
            Console.Write("json parser> ");
            try
            {
                var res = JsonValue.Parse(Console.ReadLine());
                Console.WriteLine(res.ToString());
            }
            catch (SyntaxError e)
            {
                Console.WriteLine(e.Message);
            }

        }
    }
}

public partial class SimpleJsonParser
{
    public static string getStr(IToken token)
    {
        return token.Text;
    }
    public static MyList<T> appendList<T>(MyList<T> lst, T e)
    {
        lst.Add(e);
        return lst;
    }
    public static Dictionary<K, V> mk_dict<K, V>(List<(K, V)> lst)
    {
        var ret = new Dictionary<K, V>();
        foreach (var (k, v) in lst)
        {
            ret[k] = v;
        }
        return ret;
    }
    public static int parseInt(string s) => int.Parse(s, System.Globalization.NumberStyles.AllowExponent);
    public static float parseFlt(string s) => float.Parse(s);
    public static string unesc(string s) =>
        System.Text.RegularExpressions.Regex.Unescape(s.Substring(1, s.Length - 2));
    public static string esc_string(string s) =>
        "\"" + System.Text.RegularExpressions.Regex.Escape(s).Replace("\"", "\\\"") + "\"";

    // public static JList jsonList(List<JsonValue> cs) =>
    //     new JList(cs);
    // public static JDict jsonDict(List<(string, JsonValue)> cs) =>
    //     new JDict(mk_dict(cs));
    // public static JInt jsonInt(int cs) =>
    //     new JInt(cs);

    // public static JFloat jsonFlt(float cs) =>
    //     new JFloat(cs);
    // public static JString jsonStr(string cs) =>
    //     new JString(cs);

    // public static JNull jsonNull => new JNull();
    // public static JBool jsonBool(bool b) => new JBool(b);

}