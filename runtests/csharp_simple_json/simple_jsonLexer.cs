//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./runtests/csharp_simple_json/simple_json.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace simple_json {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class simple_jsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, INT=11, FLOAT=12, STR=13, SPACE=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "DIGIT", "INT", "FLOAT", "STR", "SPACE"
	};


	public static NameValuePair<_GEN_A, _GEN_B> NameValuePair <_GEN_A, _GEN_B>(_GEN_A name,_GEN_B value)
	{
	    return (NameValuePair<_GEN_A, _GEN_B>) new NameValuePair<_GEN_A, _GEN_B>(name,value);
	}
	public static JsonValue JStr (string value)
	{
	    return (JsonValue) new JStr(value);
	}
	public static JsonValue JNull ()
	{
	    return (JsonValue) new JNull();
	}
	public static JsonValue JList (MyList<JsonValue> elements)
	{
	    return (JsonValue) new JList(elements);
	}
	public static JsonValue JInt (int value)
	{
	    return (JsonValue) new JInt(value);
	}
	public static JsonValue JFlt (float value)
	{
	    return (JsonValue) new JFlt(value);
	}
	public static JsonValue JDict (MyList<NameValuePair<string, JsonValue>> value)
	{
	    return (JsonValue) new JDict(value);
	}
	public static JsonValue JBool (bool value)
	{
	    return (JsonValue) new JBool(value);
	}


	public simple_jsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public simple_jsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "','", "'null'", "'''", "'['", "']'", "'{'", "'}'", "'true'", 
		"'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "INT", 
		"FLOAT", "STR", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "simple_json.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static simple_jsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,95,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
		1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,4,11,
		65,8,11,11,11,12,11,66,1,12,5,12,70,8,12,10,12,12,12,73,9,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,5,13,82,8,13,10,13,12,13,85,9,13,1,13,1,13,1,
		14,4,14,90,8,14,11,14,12,14,91,1,14,1,14,0,0,15,1,1,3,2,5,3,7,4,9,5,11,
		6,13,7,15,8,17,9,19,10,21,0,23,11,25,12,27,13,29,14,1,0,3,1,0,48,57,1,
		0,34,34,3,0,9,10,13,13,32,32,98,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
		7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,
		31,1,0,0,0,3,33,1,0,0,0,5,35,1,0,0,0,7,40,1,0,0,0,9,42,1,0,0,0,11,44,1,
		0,0,0,13,46,1,0,0,0,15,48,1,0,0,0,17,50,1,0,0,0,19,55,1,0,0,0,21,61,1,
		0,0,0,23,64,1,0,0,0,25,71,1,0,0,0,27,77,1,0,0,0,29,89,1,0,0,0,31,32,5,
		58,0,0,32,2,1,0,0,0,33,34,5,44,0,0,34,4,1,0,0,0,35,36,5,110,0,0,36,37,
		5,117,0,0,37,38,5,108,0,0,38,39,5,108,0,0,39,6,1,0,0,0,40,41,5,39,0,0,
		41,8,1,0,0,0,42,43,5,91,0,0,43,10,1,0,0,0,44,45,5,93,0,0,45,12,1,0,0,0,
		46,47,5,123,0,0,47,14,1,0,0,0,48,49,5,125,0,0,49,16,1,0,0,0,50,51,5,116,
		0,0,51,52,5,114,0,0,52,53,5,117,0,0,53,54,5,101,0,0,54,18,1,0,0,0,55,56,
		5,102,0,0,56,57,5,97,0,0,57,58,5,108,0,0,58,59,5,115,0,0,59,60,5,101,0,
		0,60,20,1,0,0,0,61,62,7,0,0,0,62,22,1,0,0,0,63,65,3,21,10,0,64,63,1,0,
		0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,24,1,0,0,0,68,70,3,21,
		10,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,1,0,
		0,0,73,71,1,0,0,0,74,75,5,46,0,0,75,76,3,23,11,0,76,26,1,0,0,0,77,83,5,
		34,0,0,78,79,5,92,0,0,79,82,9,0,0,0,80,82,8,1,0,0,81,78,1,0,0,0,81,80,
		1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,86,1,0,0,0,85,83,
		1,0,0,0,86,87,5,34,0,0,87,28,1,0,0,0,88,90,7,2,0,0,89,88,1,0,0,0,90,91,
		1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,94,6,14,0,0,94,30,
		1,0,0,0,6,0,66,71,81,83,91,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace simple_json
