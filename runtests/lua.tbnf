extern var appendList : <a> (list<a>, a) -> list<a>
extern var listMap : <a, b> (list<a>, a -> b) -> list<b>

extern type maybe<a>
    extern var some : <a> a -> maybe<a>
    extern var none : <a> () -> maybe<a>

type funcname
case DotName : (funcname, token) -> funcname
case VarName : token -> funcname
case MethodName : (funcname, token) -> funcname

type stmt
type expr
type block(suite: list<stmt>, ret: maybe<stmt>)

extern type op<a>
    extern var mkOperator: <a> token -> op<a>
    extern var mkOperand : expr -> op<expr>
    extern var mkBinOpSeq : (
          ops: list<op<expr>>,
          mkbin: (token, expr, expr) -> expr, mkunsolved_bin: list<op<expr>> -> expr)
          -> expr

type range(low: expr, high: expr, step: maybe<expr>)
type if_elseif(pos: token, cond: expr, elif_body: block)
type if_else(pos: token, else_body: block)

type params(names: list<token>, vararg: maybe<token>)

type arguments
type table
type table_field

case PositionalArgs: (token, list<expr>) -> arguments
case TableArgs: table -> arguments
case StringArg: token -> arguments
case TableConstructor: (token, list<table_field>) -> table

case IndexField: (pos: token, value: expr, item: expr) -> table_field
case NameField : (key: token, value: expr) -> table_field
case ElementField : (expr) -> table_field


case ReturnStmt: (token, list<expr>) -> stmt
case EmptyStmt: (token) -> stmt
case Assignment: (bool/* is local */, list<expr>, maybe<list<expr>>) -> stmt
case ExprStmt: expr -> stmt
case LabelStmt: token -> stmt
case BreakStmt: token -> stmt
case GotoStmt: (token /* head */, token /* name */) -> stmt
case DoStmt: (token, block) -> stmt
case WhileStmt: (token, expr, block) -> stmt
case RepeatStmt: (token, block, expr) -> stmt
case IfStmt: (token, expr, block, list<if_elseif>, maybe<if_else>) -> stmt
case ForRangeStmt: (token, token, range, block) -> stmt
case ForInStmt: (token, list<token>, list<expr>, block) -> stmt

case FuncDef:
      (pos: token, is_local: bool, fname: maybe<funcname>,
       params: maybe<params>, body: block) -> expr

case Bin : (op: token, l: expr, r: expr) -> expr
case UnsolvedBin : list<op<expr>> -> expr
case Var : token -> expr
case Nil: token -> expr
case Bool: (token, bool) -> expr
case Num: (token) -> expr
case String: (token) -> expr
case Ellipse: (token) -> expr
case Exponent: (expr, expr) -> expr
case Len: (token, expr) -> expr
case Neg: (token, expr) -> expr
case Inv: (token, expr) -> expr
case Not: (token, expr) -> expr
case NestedExp: (token, expr) -> expr
case TableExpr: (table) -> expr
case CallFunc: (expr, arguments) -> expr
case CallMethod: (expr, token, arguments) -> expr
case Index: (expr, expr) -> expr
case Attr: (expr, token) -> expr

nempty_list(elt)
    : elt { [$1] }
    | nempty_list(elt) elt { appendList($1, $2) }

nempty_seplist(sep, elt)
    : elt { [$1] }
    | nempty_seplist(sep, elt) sep elt { appendList($1, $3) }

allow_empty(sequence)
    :          { [] }
    | sequence { $1 }

start : block { $1 }

list(elt) : allow_empty(nempty_list(elt)) { $1 }

seplist(sep, elt) : allow_empty(nempty_seplist(sep, elt)) { $1 }

opt(value) : value { some($1) }
           |       { none() }

block : list(stat) opt(retstat) { block($1, $2) }

retstat : "return" seplist(",", exp) opt(";") { ReturnStmt($1, $2) }

stat : ";" { EmptyStmt($1) }
     | nempty_seplist(",", exp) "=" nempty_seplist(",", exp)
           { Assignment(false, $1, some($3)) }
     | exp
           { ExprStmt($1) }
     | "::" <NAME> "::"
           { LabelStmt($2) }
     | "break"
           { BreakStmt($1) }
     | "goto" <NAME>
           { GotoStmt($1, $2) }
     | "do" block "end"
           { DoStmt($1, $2) }
     | "while" exp "do" block "end"
           { WhileStmt($1, $2, $4) }
     | "repeat" block "until" exp
           { RepeatStmt($1, $2, $4) }
     | "if" exp "then" block list(elseif) opt(else) "end"
           { IfStmt($1, $2, $4, $5, $6) }
     | "for" <NAME> "=" range "do" block "end"
           { ForRangeStmt($1, $2, $4, $6) }
     | "for" nempty_seplist(",", <NAME>) "in" nempty_seplist(",", exp) "do" block "end"
           { ForInStmt($1, $2, $4, $6) }
     | "local" "function" funcname "(" opt(parlist) ")" block "end"
           { ExprStmt(FuncDef($1, true, some($3), $5, $7)) }
     | "local" nempty_seplist(",", <NAME>) opt_assign_rhs
           { Assignment(true, listMap($2, Var), $3) }

opt_assign_rhs :
             "=" nempty_seplist(",", exp) { some($2) }
           | { none() }

range : exp "," exp range_tail { range($1, $3, $4) }
range_tail : "," exp { some($2) }
           |         { none() }

elseif : "elseif" exp "then" block { if_elseif($1, $2, $4) }
else : "else" block { if_else($1, $2) }


exp : binexp { 0;$1 }
binexp : binseq { mkBinOpSeq($1, Bin, UnsolvedBin) }

binseq : binseq binop binoperand { appendList(appendList($1, $2), $3) }
       | binoperand              { [$1] }

binoperand : unaryexp { mkOperand($1) }

unaryexp : "#" exponent { Len($1, $2) }
         | "-" exponent { Neg($1, $2) }
         | "~" exponent { Inv($1, $2) }
         | "not" exponent { Not($1, $2) }
         | exponent { $1 }

exponent : prefixexp "^" exponent { Exponent($1, $3) }
         | prefixexp              { $1 }

prefixexp :   <NAME>                    { Var($1) }
          | "(" exp ")"               { NestedExp($1, $2) }
          | prefixexp args            { CallFunc($1, $2) }
          | prefixexp ":" <NAME> args { CallMethod($1, $3, $4) }
          | prefixexp "[" exp "]"     { Index($1, $3) }
          | prefixexp "." <NAME>      { Attr($1, $3) }
          | atom                      { $1 }

atom   : "nil"     { Nil($1) }
       | "false"   { Bool($1, false) }
       | "true"    { Bool($1, true) }
       | <NUMERAL> { Num($1) }
       | <STR_LIT> { String($1) }
       | <NESTED_STR>     { String($1) }
       | "..."            { Ellipse($1) }
       | functiondef      { $1 }
       | tableconstructor { TableExpr($1) }


args : "(" seplist(",", exp) ")" { PositionalArgs($1, $2) }
     | tableconstructor          { TableArgs($1) }
     | <STR_LIT>           { StringArg($1) }

functiondef : "function" opt(funcname) "(" opt(parlist) ")" block "end"
              { FuncDef($1, false, $2, $4, $6) }

varargs : "," "..." { some($2) }
        |           { none() }

parlist : "..." { params([], some($1)) }
        | nempty_seplist(",", <NAME>) varargs { params($1, $2) }

tableconstructor : "{" nempty_seplist(fieldsep, field) opt(fieldsep) "}"
                 { TableConstructor($1, $2) }
                 | "{" "}"
                 { TableConstructor($1, []) }

funcname : funcname "." <NAME>  { DotName($1, $3) }
         | funcname ":" <NAME>  { MethodName($1, $3) }
         | <NAME> { VarName($1) }

field : "[" exp "]" "=" exp { IndexField($1, $2, $5) }
        | <NAME> "=" exp    { NameField($1, $3) }
        | exp               { ElementField($1) }

fieldsep : "," { 0} | ";" { 0 }

binop : "or" { mkOperator($1)}
      | "and" {mkOperator($1)}
      | "<"  { mkOperator($1) }
      | ">"  { mkOperator($1) }
      | "<=" { mkOperator($1) }
      | ">=" { mkOperator($1) }
      | "~=" { mkOperator($1) }
      | "==" { mkOperator($1) }
      | "|"  { mkOperator($1) }
      | "~"  { mkOperator($1) }
      | "&"  { mkOperator($1) }
      | "<<" { mkOperator($1) }
      | ">>" { mkOperator($1) }
      | ".." { mkOperator($1) }
      | "+"  { mkOperator($1) }
      | "-"  { mkOperator($1) }
      | "*"  { mkOperator($1) }
      | "/"  { mkOperator($1) }
      | "//" { mkOperator($1) }
      | "%"  { mkOperator($1) }


ignore SPACE, LINE_COMMENT

LINE_COMMENT = "-" "-" (!"\n")* "\n";
SPACE = " " | "\t" | "\r" | "\n";
DIGIT = [0-9];
HEXCHAR = [0-9] | [a-z] | [A-Z];
UCHAR = [a-z] | [A-Z] | "_" ;
NAME =  UCHAR (UCHAR|DIGIT)*;
INT = DIGIT+;
INTEGRAL = INT ("." INT)? (("E" | "e")  INT)?;
HEX = "0x" HEXCHAR+;
NUMERAL = HEX | INTEGRAL;
STR_LIT = "\"" ("\\" _ | !"\"")* "\"";

// [[.*]]
NESTED_STR1 = "[" ("]" !"]"| !"]")* "]";
// [=[.*]=]
NESTED_STR2 =
      "="
      ( "[" (!"]" | "]" (!"=" | "=" !"]"))* "]"
      | ("=" !"]"| !"=")*
      )
      "=";
NESTED_STR = "[" (NESTED_STR1|NESTED_STR2)  "]";
