extern type position
extern var addList : <A> (list<A>, A) -> list<A>
extern var unescape : str -> str
extern var str: token -> str
extern var mkpos: token -> position

/* separated list */
slist(sep, elt) : elt { [$1] }
                | slist(sep, elt) sep elt { addList($1, $3) }

list(elt) : elt { [$1] }
               | list(elt) elt { addList($1, $2) }

start : list(toplevel) { $1 }

empty(a) :   { [] }
         | a { $1 }

eslist(sep, a) : empty(slist(sep, a)) { $1 }

elist(a) : empty(list(a)) { $1 }

/* Common */

identstr : <CNAMEPLUS> { str($1) }

/* Types */
extern type monot
extern type polyt

extern var process_tparam : list<str * monot> -> list<str * monot>
extern var MK_TFun: (list<str * monot>, monot) -> monot
extern var MK_TTuple: list<monot> -> monot
extern var MK_TList : monot -> monot
extern var MK_TVar : str -> monot
extern var MK_TConst : str -> monot
extern var MK_TApp : (monot, list<monot>) -> monot
extern var MK_Poly : (list<str>, monot) -> polyt
extern var MK_Mono : monot -> polyt

typ : arrow_typ { $1 }
arrow_typ : typ2 '->' arrow_typ
            { MK_TFun([("value", $1)], $3) }
          | '(' eslist(',', param_type) ')' '->' arrow_typ
            { MK_TFun(process_tparam($2), $5) }
          | type_product
            { MK_TTuple($1) }

typ2 : <CNAMEPLUS> { MK_TConst(str($1)) }
     | typ2 "<" slist(",", typ) ">" { MK_TApp($1, $3) }

type_product : type_product '*' typ2 { addList($1, $3) }
             | typ2                  { [$1] }

top_typ : '<' slist(',', tvar_str) '>' typ { MK_Poly($2, $4) }
        | typ                              { MK_Mono($1) }

tvar_str     : <CNAMEPLUS> { str($1) }
param_type   : <CNAMEPLUS> ':' typ { (str($1), $3) }
             | typ  { ("_", $1) }

// Toplevels

type_params : '<' slist(',', tvar_str) '>' { $2 }
            |  { [] }

field_ann : <CNAMEPLUS> ':' typ { (str($1), $3, mkpos($1)) }

field_anns :  '(' eslist(',', field_ann) ')'
             { (true, $2) } // record only
           | { (false, []) }  // adt only

extern type definition
extern type production
extern type symbol
extern type expr
extern type lexerule
extern var MK_Declvar : (str, polyt, position) -> definition
extern var MK_Declctor : (str, monot, position) -> definition
extern var MK_Decltype : (bool, bool, str, list<str>, list<str * monot * position>, position) -> definition
extern var MK_Defignore : (list<str>, position) -> definition
extern var MK_Defmacro : (str, list<str>, list<position * production>, position) -> definition
extern var MK_Defrule : (str, list<position * production>, position) -> definition
extern var MK_Deflexer : (str, lexerule, position) -> definition
extern var MK_production : (list<symbol>, expr) -> production
extern var list_index : <A>(list<A>, int) -> A
extern var fst : <A, B>(A * B) -> A
extern var snd : <A, B>(A * B) -> B

decl : "extern" "var" identstr ":" top_typ
       { MK_Declvar($3, $5, mkpos($2)) }
     | "case" identstr ":" typ
       { MK_Declctor($2, $4, mkpos($1)) }
     | "extern" "type" identstr type_params field_anns
       { MK_Decltype(true, fst($5), $3, $4, snd($5), mkpos($1)) }
     | "type" identstr type_params field_anns
       { MK_Decltype(false, fst($4), $2, $3, snd($4), mkpos($1)) }

toplevel : def             { $1 }
         | decl            { $1 }
         | lexerdef        { $1 }
         | "ignore" slist(",", identstr)  { MK_Defignore($2, mkpos($1)) }

def : <CNAMEPLUS> "(" slist(",", identstr) ")" productions
        { MK_Defmacro(str($1), $3, $5, mkpos($1)) }
    | <CNAMEPLUS> productions
        { MK_Defrule(str($1), $2, mkpos($1)) }

productions : ":" production { [(mkpos($1), $2)] }
            | productions "|" production { addList($1, (mkpos($2), $3)) }

production : elist(psym) "{" expr "}" { MK_production($1, $3) }

extern type node
extern var MK_Term : (str, bool) -> symbol
extern var MK_Nonterm : str -> symbol
extern var MK_Macrocall : (str, list<symbol>, position) -> symbol
extern var MK_Expr : (node, position) -> expr
extern var MK_EApp: (expr, list<expr>) -> node
extern var MK_ETuple: list<expr> -> node
extern var MK_EList: list<expr> -> node
extern var MK_ELet: (str, expr, expr) -> node
extern var MK_EFun: (list<str * monot>, expr) -> node
extern var MK_EVar : str -> node
extern var MK_ESlot : int -> node
extern var MK_EInt : int -> node
extern var MK_EStr : str -> node
extern var MK_EFlt : float -> node
extern var MK_EBool : bool -> node
extern var MK_EField : (expr, str) -> node
extern var toint : token -> int
extern var tofloat : token -> float
extern var getpos : expr -> position

psym : "<" identstr ">"   { MK_Term($2, false) }
     | <ESCAPED_STRING>   { MK_Term(unescape(str($1)), true) }
     | identstr           { MK_Nonterm($1) }
     | <CNAMEPLUS> "(" slist(",", psym) ")" { MK_Macrocall(str($1), $3, mkpos($1)) }


/* Simpler language */

ann: identstr ":" typ      { ($1, $3) }

func_parameters : "(" eslist(",", ann) ")" { $2 }

expr : "let" identstr "=" expr "in" expr
            { MK_Expr(MK_ELet($2, $4, $6), mkpos($1)) }
     | "fun" func_parameters "->" expr
            { MK_Expr(MK_EFun($2, $4), mkpos($1)) }
     | call
        { $1 }
     | call ";" expr
        { MK_Expr(MK_ELet("_", $1, $3), getpos($1)) }

call : call "(" eslist(",", expr) ")"
        { MK_Expr(MK_EApp($1, $3), getpos($1)) }
     | atomexp
        { $1 }

snd(a, b) : a b { $2 }

atomexp : <INT> { MK_Expr(MK_EInt(toint($1)), mkpos($1)) }
        | <FLOAT> { MK_Expr(MK_EFlt(tofloat($1)), mkpos($1)) }
        | <ESCAPED_STRING> { MK_Expr(MK_EStr(unescape(str($1))), mkpos($1)) }
        | "$" <INT> { MK_Expr(MK_ESlot(toint($2)), mkpos($1)) }
        | "[" eslist(",", expr) "]" { MK_Expr(MK_EList($2), mkpos($1)) }
        | "(" ")" { MK_Expr(MK_ETuple([]), mkpos($1)) }
        | "(" slist(",", expr) ")" { MK_Expr(MK_ETuple($2), mkpos($1)) }
        | <CNAMEPLUS> { MK_Expr(MK_EVar(str($1)), mkpos($1)) }
        | atomexp "." <CNAMEPLUS> { MK_Expr(MK_EField($1, str($3)), getpos($1)) }
        | "true" { MK_Expr(MK_EBool(true), mkpos($1)) }
        | "false" { MK_Expr(MK_EBool(false), mkpos($1)) }

// Lexical definitions

extern var getunicoderange : str -> lexerule
extern var getrange : str -> lexerule
extern var MK_LWildcard: lexerule
extern var MK_LNumber: lexerule
extern var MK_LStr: str -> lexerule
extern var MK_LSeq : list<lexerule> -> lexerule
extern var MK_LOr : list<lexerule> -> lexerule
extern var MK_LNot: lexerule -> lexerule
extern var MK_LPlus: lexerule -> lexerule
extern var MK_LStar: lexerule -> lexerule
extern var MK_LOptional: lexerule -> lexerule
extern var MK_LGroup: lexerule -> lexerule
extern var MK_LRef: str -> lexerule

lexer :  slist("|", lexer_and) { MK_LOr($1) }

lexer_and : list(lexer_atomexpr) { MK_LSeq($1) }

lexer_atomexpr :
         lexer_atomexpr "+"            { MK_LPlus($1) }
      |  lexer_atomexpr "*"            { MK_LStar($1) }
      |  lexer_atomexpr "?"            { MK_LOptional($1) }
      |  lexer_atom { $1 }

lexer_atom :  <ESCAPED_STRING> { MK_LStr(unescape(str($1))) }
      | "!" lexer_atom  { MK_LNot($2) }
      |  "(" lexer ")"  { MK_LGroup($2) }
      |  "\\d"          { MK_LNumber }
      | <RANGE> { getrange(str($1)) }
      | <UNICODE_RANGE> { getunicoderange(str($1)) }
      | "_" { MK_LWildcard }
      | "." { MK_LWildcard }
      | <CNAMEPLUS> {  MK_LRef(str($1)) }

lexerdef : <CNAMEPLUS> "=" lexer ";"
         { MK_Deflexer(str($1), $3, mkpos($1)) }

UCODE = DIGIT | [a-f] | [A-F];
UNICODE = "\\" "u" UCODE UCODE UCODE UCODE;
UNICODE_RANGE = "[" UNICODE "-" UNICODE "]";
RANGE = "[" . "-" . "]";
LCASE_LETTER = [a-z];
UCASE_LETTER = [A-Z];

LETTER = UCASE_LETTER | LCASE_LETTER;
WORD = LETTER+;
CNAMEPLUS = ("_"|LETTER) ("_"|"-"|LETTER|DIGIT)*;

INT = DIGIT+;
DIGIT = [0-9];
WS = " " | "\t" | "\r" | "\n";
FLOAT = INT ("." INT)? (("E" | "e") INT)?;
ESC1 = "a" | "b" | "t" | "n" | "r" | "\\" | "\"";
ESC2 = "a" | "b" | "t" | "n" | "r" | "\\" | "'";
ESCAPED_STRING = "\"" ("\\" ESC1 | ! ("\"" | "\\"))* "\"" 
               | "'" ( "\\" ESC2 | ! ("'" | "\\"))* "'"
               ;

CPP_COMMENT = "/*" .*? "*/";
C_COMMENT = "//" (!"\n")*;

ignore CPP_COMMENT, C_COMMENT, WS